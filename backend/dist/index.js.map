{"version":3,"file":"index.js","sources":["../src/apis/ethers.ts","../src/apis/mongo.ts","../src/apis/server.ts","../src/helpers/player/generatePlayerView.ts","../src/helpers/player/getSocketIds.ts","../src/helpers/player/isDeckValid.ts","../src/requests/auth/disconnect.ts","../src/helpers/game/generateGameFe.ts","../src/requests/auth/signin.ts","../src/requests/auth/signup.ts","../src/requests/auth/index.ts","../src/helpers/game/animateMagicTrigger.ts","../src/helpers/game/animateTrapTrigger.ts","../src/helpers/game/attackMinionSave.ts","../src/helpers/game/buildDeck.ts","../src/helpers/game/triggerEffect/heartOfSteel.ts","../src/helpers/game/deductHealth.ts","../src/helpers/game/endGame.ts","../src/helpers/game/drawCard.ts","../src/helpers/game/generateGame.ts","../src/helpers/game/getGame.ts","../src/helpers/game/getRandomMinion.ts","../src/helpers/game/isGameOver.ts","../src/helpers/game/triggerEffect/revenge.ts","../src/helpers/game/insertBuff.ts","../src/helpers/game/triggerEffect/unity.ts","../src/helpers/game/moveToGraveyard.ts","../src/helpers/game/gamePopup.ts","../src/helpers/game/saveGame.ts","../src/helpers/game/startGame.ts","../src/helpers/game/triggerEffect/lastStand.ts","../src/helpers/game/deductHealth2.ts","../src/helpers/game/triggerEffect/selfDestruct.ts","../src/helpers/game/triggerEffect/acidicDeath.ts","../src/helpers/game/triggerEffect/banish.ts","../src/helpers/game/triggerEffect/shadowSurge.ts","../src/helpers/game/triggerEffect/diminish.ts","../src/helpers/game/triggerEffect/frostbite.ts","../src/helpers/game/triggerEffect/glory.ts","../src/helpers/game/triggerEffect/mirrorsEdge.ts","../src/helpers/game/triggerEffect/risingFury.ts","../src/helpers/game/triggerEffect/blaze.ts","../src/helpers/game/triggerEffect/necromancy.ts","../src/helpers/game/triggerEffect/quickShot.ts","../src/helpers/game/triggerEffect/rebirth.ts","../src/helpers/game/triggerEffect/reload.ts","../src/helpers/game/triggerEffect/ricochet.ts","../src/helpers/game/triggerEffect/shell.ts","../src/helpers/game/getAdjacentMinions.ts","../src/helpers/game/triggerEffect/shieldwall.ts","../src/helpers/game/triggerEffect/silence.ts","../src/helpers/game/triggerEffect/smite.ts","../src/helpers/game/triggerEffect/spellweave.ts","../src/helpers/game/insertDebuff.ts","../src/helpers/game/triggerEffect/toxicSpray.ts","../src/helpers/game/triggerEffect/valor.ts","../src/helpers/game/triggerEffect/fortitude.ts","../src/helpers/game/triggerEffect/regeneration.ts","../src/helpers/game/triggerEffect/leech.ts","../src/helpers/game/triggerEffect/electroShock.ts","../src/helpers/game/triggerEffect/cleanse.ts","../src/helpers/game/triggerEffect/tidalWave.ts","../src/helpers/game/triggerEffect/retribution.ts","../src/helpers/game/triggerEffect/corrosiveTouch.ts","../src/helpers/game/triggerEffect/toxicGas.ts","../src/helpers/game/triggerEffect/acidRain.ts","../src/helpers/game/triggerEffect/smokeBomb.ts","../src/helpers/game/triggerEffect/contaminatedAir.ts","../src/helpers/game/triggerEffect/noxiousFumes.ts","../src/helpers/game/triggerEffect/poisonedGround.ts","../src/helpers/game/triggerEffect/rampage.ts","../src/helpers/game/triggerEffect/backstab.ts","../src/helpers/game/triggerEffect/overpower.ts","../src/helpers/game/triggerEffect/ignite.ts","../src/helpers/game/triggerEffect/corruption.ts","../src/helpers/game/triggerEffect/hysteria.ts","../src/helpers/game/triggerEffect/explosive.ts","../src/helpers/game/triggerEffect/reflection.ts","../src/helpers/game/triggerEffect/constriction.ts","../src/helpers/game/triggerEffect/index.ts","../src/helpers/game/index.ts","../src/requests/client/acceptGame.ts","../src/requests/client/closeLobby.ts","../src/requests/client/createLobby.ts","../src/requests/client/declineGame.ts","../src/requests/client/defaultSkin.ts","../src/requests/client/finishTutorial.ts","../src/requests/client/getLeaderboards.ts","../src/helpers/client/generateLobbyView.ts","../src/helpers/client/joinCasualQueue.ts","../src/helpers/client/joinRankedQueue.ts","../src/helpers/client/leaveCasualQueue.ts","../src/helpers/client/leaveRankedQueue.ts","../src/requests/client/joinLobby.ts","../src/requests/client/joinQueue.ts","../src/requests/client/leaveLobby.ts","../src/requests/client/leaveQueue.ts","../src/requests/client/saveDeck.ts","../src/requests/client/selectDeck.ts","../src/requests/client/selectSkin.ts","../src/requests/client/startCustomGame.ts","../src/requests/client/index.ts","../src/requests/game/attackHero.ts","../src/requests/game/attackMinion.ts","../src/requests/game/endTurn.ts","../src/requests/game/playMagic.ts","../src/requests/game/playMinion.ts","../src/requests/game/playTrap.ts","../src/requests/game/index.ts","../src/requests/sidenav/acceptFriend.ts","../src/requests/sidenav/addFriend.ts","../src/requests/sidenav/blockFriend.ts","../src/requests/sidenav/declineFriend.ts","../src/requests/sidenav/removeFriend.ts","../src/requests/sidenav/sendChatMsg.ts","../src/requests/sidenav/setAvatar.ts","../src/requests/sidenav/unblockFriend.ts","../src/requests/sidenav/updateStatus.ts","../src/requests/sidenav/index.ts","../src/requests/index.ts","../src/index.ts"],"sourcesContent":["import {ethers} from \"ethers\";\r\nimport SomGame from \"@som/contracts/SomGame/artifacts/SomGame.json\" assert {type: \"json\"};\r\nimport SomSkins from \"@som/contracts/SomSkins/artifacts/SomSkins.json\" assert {type: \"json\"};\r\n\r\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\r\nconst signer = new ethers.Wallet(\"0x36558f992d19662cdea021407513e14f83f47917ba0a28fd879ff148afd0edd2\", provider);\r\n\r\nconst gameKey = \"0xA1584c8E3e572101D0D28A9ebb1784Af9f0fBCd4\";\r\nconst skinsKey = \"0x759F6751A243cc8EacC959bd10A910831A670720\";\r\n\r\nconst game = new ethers.Contract(gameKey, SomGame.abi, signer);\r\nconst skins = new ethers.Contract(skinsKey, SomSkins.abi, signer);\r\n\r\nconst contracts = {game, skins};\r\n\r\nexport {contracts};\r\n","import {MongoClient} from \"mongodb\";\nimport type {\n  Account,\n  CasualQueuePlayer,\n  Chat,\n  Game,\n  GamePopup,\n  Lobby,\n  MarketItem,\n  Player,\n  RankedQueuePlayer\n} from \"@som/shared/types/backend\";\n\nconst mongoClient = await MongoClient.connect(\"mongodb://127.0.0.1:27017\");\nconst eternitas = mongoClient.db(\"eternitas\");\nconst som = mongoClient.db(\"som\");\n\nconst mongo = {\n  accounts: eternitas.collection<Account>(\"accounts\"),\n  chats: eternitas.collection<Chat>(\"chats\"),\n  casualQueuePlayers: som.collection<CasualQueuePlayer>(\"casualQueuePlayers\"),\n  games: som.collection<Game>(\"games\"),\n  gamePopups: som.collection<GamePopup>(\"gamePopups\"),\n  lobbies: som.collection<Lobby>(\"lobbies\"),\n  players: som.collection<Player>(\"players\"),\n  rankedQueuePlayers: som.collection<RankedQueuePlayer>(\"rankedQueuePlayers\"),\n  marketItems: som.collection<MarketItem>(\"marketItems\")\n};\n\nexport {mongo};\n","import {createServer} from \"http\";\r\nimport {Server} from \"socket.io\";\r\nimport type {SocketResponses} from \"@som/shared/types/responses\";\r\nimport type {SocketRequests} from \"@som/shared/types/requests\";\r\n\r\nconst http = createServer();\r\nconst io = new Server<SocketRequests, SocketResponses>(http, {\r\n  cors: {\r\n    origin: \"*\"\r\n  },\r\n  serveClient: false,\r\n  transports: [\"websocket\"],\r\n  allowUpgrades: false\r\n});\r\n\r\nconst server = {http, io};\r\n\r\nexport {server};\r\n","import {cards, cardsView} from \"@som/shared/data\";\nimport {CardType} from \"@som/shared/enums\";\nimport type {Player} from \"@som/shared/types/backend\";\nimport type {PlayerView} from \"@som/shared/types/frontend\";\n\nconst generatePlayerView = (player: Player): PlayerView => {\n  const {\n    name,\n    experience,\n    level,\n    elo,\n    joinedAt,\n    status,\n    queueId,\n    deckId,\n    lobbyId,\n    gamePopupId,\n    gameId,\n    games,\n    skins,\n    tutorial\n  } = player;\n\n  const decks = player.decks.map((deck) => ({\n    id: deck.id,\n    klass: deck.klass,\n    name: deck.name,\n    cardsInDeck: deck.cards.reduce((acc, {amount}) => acc += amount, 0),\n    cards: deck.cards.map((deckCard) => {\n      const card = cards.find((card) => deckCard.id === card.id);\n\n      if (!card || card.type === CardType.HERO) {\n        console.log(\"Card not found, deck invalid, hero can't be in deck...?\");\n        // this should never happen though...\n        return {id: 0, name: \"\", amount: 0, manaCost: 0};\n      }\n\n      const cardView = cardsView.get(card.id);\n\n      if (!cardView) {\n        return {id: 0, name: \"\", amount: 0, manaCost: 0};\n      }\n\n      const {id, amount} = deckCard;\n      const {manaCost} = card;\n      const {name} = cardView;\n\n      return {id, name, amount, manaCost};\n    })\n  }));\n\n  return {\n    name,\n    experience,\n    level,\n    elo,\n    joinedAt,\n    status,\n    queueId,\n    deckId,\n    lobbyId,\n    gameId,\n    gamePopupId,\n    games,\n    decks,\n    skins,\n    tutorial\n  };\n};\n\nexport {generatePlayerView};\n","import {mongo} from \"apis\";\r\n\r\nconst getSocketIds = async (players: string[]): Promise<string[]> => {\r\n  return await mongo\r\n    .players\r\n    .find({name: {$in: players}})\r\n    .project({_id: 0, socketId: 1})\r\n    .map(({socketId}) => socketId)\r\n    .toArray();\r\n};\r\n\r\nexport {getSocketIds};\r\n","import type {PlayerDeck} from \"@som/shared/types/backend/player\";\r\n\r\nconst isDeckValid = (playerDeck: PlayerDeck): boolean => {\r\n  const numberOfCards = playerDeck\r\n    .cards\r\n    .reduce((value, {amount}) => value += amount, 0);\r\n\r\n  if (numberOfCards !== 30) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport {isDeckValid};\r\n","import {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\nimport {getSocketIds} from \"helpers/player\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst disconnect: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"disconnect\", async (reason) => {\r\n    const $playerUpdate = await players.findOneAndUpdate({socketId}, {\r\n      $set: {\r\n        socketId: \"\",\r\n        status: PlayerStatus.OFFLINE\r\n      }\r\n    }, {\r\n      returnDocument: \"after\"\r\n    });\r\n\r\n    if (!$playerUpdate.value) {\r\n      return error(\"Error updating player.\");\r\n    }\r\n\r\n    const {name, status} = $playerUpdate.value;\r\n    const $account = await accounts.findOne({name});\r\n\r\n    if (!$account) {\r\n      return error(\"Account not found.\");\r\n    }\r\n\r\n    const socketIds = await getSocketIds($account.social.friends);\r\n    server.io.to(socketIds).emit(\"updateStatus\", {name, status});\r\n  });\r\n};\r\n\r\nexport {disconnect};\r\n","import type {GameView} from \"@som/shared/types/frontend\";\r\nimport type {Game} from \"@som/shared/types/backend\";\r\n\r\nconst generateGameView = (game: Game, name: string): GameView => {\r\n  const {\r\n    id,\r\n    type,\r\n    currentPlayer,\r\n    currentTurn,\r\n    gameLogs,\r\n    playerA,\r\n    playerB\r\n  } = game;\r\n\r\n  return {\r\n    id,\r\n    type,\r\n    currentPlayer,\r\n    currentTurn,\r\n    gameLogs,\r\n    player: playerA.name === name ? {\r\n      name: playerA.name,\r\n      hero: playerA.hero,\r\n      minion: playerA.minion,\r\n      trap: playerA.trap,\r\n      deck: playerA.deck.length,\r\n      hand: playerA.hand,\r\n      graveyard: playerA.graveyard,\r\n      skins: playerA.skins\r\n    } : {\r\n      name: playerB.name,\r\n      hero: playerB.hero,\r\n      minion: playerB.minion,\r\n      trap: playerB.trap,\r\n      deck: playerB.deck.length,\r\n      hand: playerB.hand,\r\n      graveyard: playerB.graveyard,\r\n      skins: playerB.skins\r\n    },\r\n    opponent: playerA.name === name ? {\r\n      name: playerB.name,\r\n      hero: playerB.hero,\r\n      minion: playerB.minion,\r\n      trap: playerB.trap ? true : false,\r\n      deck: playerB.deck.length,\r\n      hand: playerB.hand.length,\r\n      graveyard: playerB.graveyard,\r\n      skins: playerB.skins\r\n    } : {\r\n      name: playerA.name,\r\n      hero: playerA.hero,\r\n      minion: playerA.minion,\r\n      trap: playerA.trap ? true : false,\r\n      deck: playerA.deck.length,\r\n      hand: playerA.hand.length,\r\n      graveyard: playerA.graveyard,\r\n      skins: playerA.skins\r\n    }\r\n  };\r\n};\r\n\r\nexport {generateGameView};\r\n","import {compare} from \"bcrypt\"\nimport {PlayerStatus} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\nimport {generatePlayerView} from \"helpers/player\";\nimport {generateGameView} from \"helpers/game/generateGameFe\";\nimport type {AccountFrontend, GameView} from \"@som/shared/types/frontend\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst signin: SocketRequest = (socket, error): void => {\n  const socketId = socket.id;\n  const {accounts, chats, games, lobbies, players} = mongo;\n\n  socket.on(\"signin\", async (params) => {\n    const {name, password} = params;\n    let lobby, game: any;\n\n    const acc = await accounts.findOne({name});\n\n    if (!acc) {\n      return error(`Account ${name} not found.`);\n    }\n\n    const isCorrectPassword = await compare(password, acc.passwordHash);\n\n    if (!isCorrectPassword) {\n      return error(\"Invalid password.\");\n    }\n\n    const $player = await players.findOneAndUpdate({name}, [{\n      $set: {\n        socketId,\n        status: {\n          $switch: {\n            branches: [{\n              case: {\n                $gt: [\"$lobbyId\", 0]\n              },\n              then: PlayerStatus.IN_LOBBY\n            }, {\n              case: {\n                $gt: [\"$gameId\", 0]\n              },\n              then: PlayerStatus.IN_GAME\n            }],\n            default: PlayerStatus.ONLINE\n          }\n        }\n      }\n    }], {\n      returnDocument: \"after\"\n    });\n\n    if (!$player.value) {\n      return error(\"Error updating player.\");\n    }\n\n    const friendsView: Array<any> = [];\n\n    for (const friendname of acc.social.friends) {\n      const [friend, friendAcc, chat] = await Promise.all([\n        players.findOne({\n          name: friendname\n        }),\n        accounts.findOne({\n          name: friendname\n        }),\n        chats.findOne({\n          players: {\n            $all: [$player.value.name, friendname]\n          }\n        })\n      ]);\n\n      if (!friend || !friendAcc || !chat) { return; }\n\n      const {status} = friend;\n      const {messages} = chat;\n\n      friendsView.push({name: friendname, status, avatarId: friendAcc?.avatarId, messages});\n    }\n\n    const social = {\n      friends: friendsView,\n      requests: acc.social.requests,\n      blocked: acc.social.blocked,\n      chat: {\n        name: \"\",\n        status: 0,\n        avatarId: 0,\n        messages: [],\n        isOpen: false\n      }\n    };\n\n    const {lobbyId, gameId} = $player.value;\n    let gameFrontend: GameView | undefined;\n\n    if (lobbyId) {\n      lobby = await lobbies.findOne({id: lobbyId});\n\n      if (!lobby) {\n        return error(\"You are currently in a lobby that cannot be found. (Contact dev)\");\n      }\n    } else if (gameId) {\n      game = await games.findOne({id: gameId});\n\n      if (!game) {\n        return error(\"You are currently in a game that cannot be found. (Contact dev)\");\n      }\n\n      gameFrontend = generateGameView(game, $player.value.name);\n    }\n\n    const accountFrontend: AccountFrontend = {\n      name,\n      publicKey: acc.publicKey,\n      avatarId: acc.avatarId,\n      bannerId: acc.bannerId,\n      social\n    };\n\n    const playerFrontend = generatePlayerView($player.value);\n\n    socket.emit(\"signin\", {\n      accountFrontend,\n      playerFrontend,\n      lobbyFrontend: lobby as any,\n      gameFrontend\n    });\n  });\n};\n\nexport {signin};\n","import {hash} from \"bcrypt\";\r\nimport {cards} from \"@som/shared/data\";\r\nimport {PlayerStatus, QueueId} from \"@som/shared/enums\";\r\nimport {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst signup: SocketRequest = (socket, error): void => {\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"signup\", async (params) => {\r\n    const {name, password} = params;\r\n\r\n    if (name.length > 16) {\r\n      return error(\"Maximum 16 characters.\");\r\n    }\r\n\r\n    const $account = await accounts.findOne({name});\r\n\r\n    if ($account) {\r\n      return error(\"Name taken.\");\r\n    }\r\n\r\n    const passwordHash = await hash(password, 12);\r\n\r\n    const [insertAccount, insertPlayer] = await Promise.all([\r\n      accounts.insertOne({\r\n        name,\r\n        passwordHash,\r\n        publicKey: \"\",\r\n        avatarId: 0,\r\n        bannerId: 0,\r\n        social: {\r\n          friends: [],\r\n          requests: [],\r\n          blocked: []\r\n        }\r\n      }),\r\n      players.insertOne({\r\n        socketId: \"\",\r\n        name,\r\n        experience: 0,\r\n        level: 1,\r\n        elo: 500,\r\n        joinedAt: Date.now(),\r\n        status: PlayerStatus.OFFLINE,\r\n        queueId: QueueId.NONE,\r\n        deckId: 0,\r\n        lobbyId: 0,\r\n        gameId: 0,\r\n        gamePopupId: 0,\r\n        games: {\r\n          casual: {won: 0, lost: 0},\r\n          ranked: {won: 0, lost: 0}\r\n        },\r\n        decks: [\r\n          {id: 0, klass: 1, name: \"Deck 1\", cards: []},\r\n          {id: 1, klass: 2, name: \"Deck 2\", cards: []},\r\n          {id: 2, klass: 3, name: \"Deck 3\", cards: []},\r\n          {id: 3, klass: 4, name: \"Deck 4\", cards: []}\r\n        ],\r\n        skins: cards.map((card) => ({cardId: card.id, skinId: 0})),\r\n        tutorial: {\r\n          deckBuilder: false,\r\n          game: false,\r\n          play: false,\r\n          wallet: false\r\n        }\r\n      })\r\n    ]);\r\n\r\n    if (!insertAccount.insertedId) {\r\n      if (insertPlayer.insertedId) {\r\n        await mongo.players.deleteOne({\r\n          _id: insertPlayer.insertedId\r\n        });\r\n      }\r\n\r\n      return error(\"Error creating account, please try again.\");\r\n    }\r\n\r\n    if (!insertPlayer.insertedId) {\r\n      if (insertAccount.insertedId) {\r\n        await mongo.accounts.deleteOne({\r\n          _id: insertAccount.insertedId\r\n        });\r\n      }\r\n\r\n      return error(\"Error creating player, please try again.\");\r\n    }\r\n\r\n    socket.emit(\"notification\", \"Account created successfully.\");\r\n  });\r\n};\r\n\r\nexport {signup};\r\n","import {disconnect} from \"./disconnect\";\r\nimport {signin} from \"./signin\";\r\nimport {signup} from \"./signup\";\r\n\r\nconst auth = [disconnect, signin, signup];\r\n\r\nexport {auth};\r\n","import { mongo, server } from \"apis\";\r\nimport type {Game} from \"@som/shared/types/backend\";\r\n\r\nconst animateMagicTrigger = async (game: Game, username: string, card: any) => {\r\n    const { players } = mongo;\r\n    const { io } = server;\r\n    const { playerA, playerB } = game;\r\n    const [$playerA, $playerB] = await Promise.all([\r\n        players.findOne({\r\n            name: playerA.name\r\n        }),\r\n        players.findOne({\r\n            name: playerB.name\r\n        })\r\n    ]);\r\n    if (!$playerA || !$playerB) {\r\n        console.error(\"Animate magic trigger failed fetching players.\");\r\n        return;\r\n    }\r\n    if ($playerA.name === username) {\r\n        io.to($playerA.socketId).emit(\"animateMagicTrigger\" as any, {\r\n            username, card\r\n        });\r\n        io.to($playerB.socketId).emit(\"animateMagicTrigger\" as any, {\r\n            username, card\r\n        });\r\n    }\r\n    else {\r\n        io.to($playerA.socketId).emit(\"animateMagicTrigger\" as any, {\r\n            username, card\r\n        });\r\n        io.to($playerB.socketId).emit(\"animateMagicTrigger\" as any, {\r\n            username, card\r\n        });\r\n    }\r\n};\r\n\r\nexport {animateMagicTrigger};\r\n","import {mongo, server} from \"apis\";\nimport type {Game, GameTrapCard} from \"@som/shared/types/backend/game\";\n\nconst animateTrapTrigger = async (game: Game, username: string, card: GameTrapCard): Promise<void> => {\n  const {players} = mongo;\n  const {io} = server;\n  const {playerA, playerB} = game;\n  const [$playerA, $playerB] = await Promise.all([\n    players.findOne({\n      name: playerA.name\n    }),\n    players.findOne({\n      name: playerB.name\n    })\n  ]);\n\n  if (!$playerA || !$playerB) {\n    console.error(\"Animate trap trigger failed fetching players.\");\n    return;\n  }\n\n  if ($playerA.name === username) {\n    io.to($playerA.socketId).emit(\"animateTrapTrigger\" as any, {\n      username, card\n    });\n\n    io.to($playerB.socketId).emit(\"animateTrapTrigger\" as any, {\n      username, card\n    });\n  } else {\n    io.to($playerA.socketId).emit(\"animateTrapTrigger\" as any, {\n      username, card\n    });\n\n    io.to($playerB.socketId).emit(\"animateTrapTrigger\" as any, {\n      username, card\n    });\n  }\n};\n\nexport {animateTrapTrigger};\n","import {mongo, server} from \"apis\";\r\nimport {generateGameView} from \"./generateGameFe\";\r\nimport type {Game} from \"@som/shared/types/backend\";\r\n\r\nconst attackMinionSave = async (\r\n  $game: Game,\r\n  username: string,\r\n  attacker: string,\r\n  attacked: string,\r\n  attackerDamage: number,\r\n  attackedDamage: number\r\n): Promise<void> => {\r\n  const {players, games} = mongo;\r\n  const {io} = server;\r\n  const {playerA, playerB} = $game;\r\n  const [$playerA, $playerB] = await Promise.all([\r\n    players.findOne({\r\n      name: playerA.name\r\n    }),\r\n    players.findOne({\r\n      name: playerB.name\r\n    })\r\n  ]);\r\n\r\n  if (!$playerA || !$playerB) {\r\n    return;\r\n  }\r\n\r\n  io.to($playerA.socketId).emit(\"attackMinionSave\" as any, {\r\n    game: generateGameView($game, $playerA.name),\r\n    username,\r\n    attacker,\r\n    attacked,\r\n    attackedDamage,\r\n    attackerDamage\r\n  });\r\n\r\n  io.to($playerB.socketId).emit(\"attackMinionSave\" as any, {\r\n    game: generateGameView($game, $playerB.name),\r\n    username,\r\n    attacker,\r\n    attacked,\r\n    attackedDamage,\r\n    attackerDamage\r\n  });\r\n\r\n  // if ($playerA.name === username) {\r\n  //   io.to($playerA.socketId).emit(\"attackMinionSave\" as any, {\r\n  //     game: generateGameView($game, $playerA.name),\r\n  //     username,\r\n  //     playerField: attacker,\r\n  //     opponentField: attacked,\r\n  //     playerDamageTaken: attackedDamage,\r\n  //     opponentDamageTaken: attackerDamage\r\n  //   });\r\n\r\n  //   io.to($playerB.socketId).emit(\"attackMinionSave\" as any, {\r\n  //     game: generateGameView($game, $playerB.name),\r\n  //     username,\r\n  //     playerField: attacked,\r\n  //     opponentField: attacker,\r\n  //     playerDamageTaken: attackerDamage,\r\n  //     opponentDamageTaken: attackedDamage\r\n  //   });\r\n  // }\r\n  // else {\r\n  //   io.to($playerA.socketId).emit(\"attackMinionSave\" as any, {\r\n  //     game: generateGameView($game, $playerA.name),\r\n  //     username,\r\n  //     playerField: attacked,\r\n  //     opponentField: attacker,\r\n  //     playerDamageTaken: attackerDamage,\r\n  //     opponentDamageTaken: attackedDamage\r\n  //   });\r\n\r\n  //   io.to($playerB.socketId).emit(\"attackMinionSave\" as any, {\r\n  //     game: generateGameView($game, $playerB.name),\r\n  //     username,\r\n  //     playerField: attacker,\r\n  //     opponentField: attacked,\r\n  //     playerDamageTaken: attackedDamage,\r\n  //     opponentDamageTaken: attackerDamage\r\n  //   });\r\n  // }\r\n\r\n  await games.replaceOne({id: $game.id}, $game);\r\n};\r\n\r\nexport {attackMinionSave};\r\n","import {randomInt} from \"crypto\";\r\nimport {cards} from \"@som/shared/data\";\r\nimport {CardType} from \"@som/shared/enums\";\r\nimport type {\r\n  GameCards,\r\n  GameMagicCard,\r\n  GameMinionCard,\r\n  GameTrapCard\r\n} from \"@som/shared/types/backend/game\";\r\nimport type {PlayerDeck} from \"@som/shared/types/backend/player\";\r\n\r\nconst buildDeck = (deck: PlayerDeck): GameCards => {\r\n  let gameDeck: GameCards = [];\r\n  let gid = 1;\r\n\r\n  deck.cards.forEach((deckCard) => {\r\n    const card = cards.find((card) => card.id === deckCard.id);\r\n\r\n    if (!card) {\r\n      console.error(\"One of the cards in the deck is invalid.\");\r\n      return;\r\n    }\r\n\r\n    if (card.type === CardType.HERO) {\r\n      console.error(\"Hero cannot be a deck card.\")\r\n      return;\r\n    }\r\n\r\n    const {id, klass, effect, manaCost} = card;\r\n    let gameCard: GameMagicCard | GameMinionCard | GameTrapCard;\r\n\r\n    if (card.type === CardType.MINION) {\r\n      const {type, health, damage} = card;\r\n\r\n      gameCard = {\r\n        id,\r\n        gid,\r\n        klass,\r\n        effect,\r\n        type,\r\n        health,\r\n        damage,\r\n        manaCost,\r\n        maxHealth: health,\r\n        canAttack: false,\r\n        buffs: [],\r\n        debuffs: []\r\n      };\r\n    } else {\r\n      const {type} = card;\r\n      gameCard = {id, gid, klass, effect, type, manaCost};\r\n    }\r\n\r\n    gameDeck.push(gameCard);\r\n    gid += 1;\r\n\r\n    if (deckCard.amount > 1) {\r\n      gameDeck.push({...gameCard, gid});\r\n      gid += 1;\r\n    }\r\n  });\r\n\r\n  for (let i = gameDeck.length - 1; i > 0; i -= 1) {\r\n    const j = randomInt(0, i + 1);\r\n    const temp = gameDeck[i];\r\n\r\n    gameDeck[i] = gameDeck[j];\r\n    gameDeck[j] = temp;\r\n  }\r\n\r\n  return gameDeck;\r\n};\r\n\r\nexport {buildDeck};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface HeartOfSteel {\r\n  minion: GameMinionCard;\r\n  player: GamePlayer;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst heartOfSteel: Effect<HeartOfSteel> = (params) => {\r\n  params.minion.damage += 3;\r\n  params.player.graveyard.push(params.trap);\r\n  params.player.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {heartOfSteel};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {heartOfSteel} from \"./triggerEffect/heartOfSteel\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport gameEngine from \".\";\r\n\r\n/**\r\n* MODIFY THIS FUNCTION SO THAT IT CHECKS WHETHER HP IS <0, CALLS ALL ONDEATH EFFECTS\r\n* AND MOVES THE CARD TO GRAVEYARD.\r\n*/\r\nconst deductHealth = (\r\n  attacker: GamePlayer,\r\n  attacked: GamePlayer,\r\n  attackerMinion: GameMinionCard,\r\n  attackedMinion: GameMinionCard\r\n): void => {\r\n  const shieldBuff = attackerMinion.buffs.find((buff) => buff.id === EffectId.SHIELD);\r\n\r\n  if (shieldBuff) { // has shield\r\n    const amt = shieldBuff.data.amount;\r\n\r\n    if (amt > attackedMinion.damage) { // shield reduced\r\n      shieldBuff.data.amount -= attackedMinion.damage\r\n    } else if (amt <= attackedMinion.damage) { // shield broken\r\n      if (attacker.trap && attacker.trap.effect === EffectId.HEART_OF_STEEL) {\r\n        heartOfSteel({minion: attackerMinion, player: attacker, trap: attacker.trap});\r\n      }\r\n\r\n      const remaining = shieldBuff.data.amount - attackedMinion.damage;\r\n\r\n      if (remaining < 0) {\r\n        if (attackedMinion.buffs.find((buff) => buff.id === EffectId.LEECH)) {\r\n          gameEngine.triggerEffect.leech({player: attacked, minion: attackedMinion});\r\n        }\r\n\r\n        if (attackerMinion.buffs.find((buff) => buff.id === EffectId.RESILIENT)) {\r\n          attackerMinion.health -= 1;\r\n        } else {\r\n          attackerMinion.health -= remaining;\r\n        }\r\n      }\r\n\r\n      const index = attackerMinion.buffs.indexOf(shieldBuff);\r\n      attackerMinion.buffs.splice(index, 1);\r\n    }\r\n  } else { // no shield\r\n    if (attackedMinion.buffs.find((buff) => buff.id === EffectId.LEECH)) {\r\n      gameEngine.triggerEffect.leech({player: attacked, minion: attackedMinion});\r\n    }\r\n\r\n    if (attackerMinion.buffs.find((buff) => buff.id === EffectId.RESILIENT)) {\r\n      attackerMinion.health -= 1;\r\n    } else {\r\n      attackerMinion.health -= attackedMinion.damage;\r\n    }\r\n  }\r\n\r\n  if (attackerMinion.health <= 0) {\r\n    const hasAcidicDeathBuff = attackerMinion.buffs.find((buff) => buff.id === EffectId.ACIDIC_DEATH);\r\n    const hasSelfDescturctDebuff = attackerMinion.debuffs.find((debuff) => debuff.id === EffectId.SELF_DESTRUCT);\r\n  }\r\n};\r\n\r\nexport {deductHealth};\r\n","import {GameType, PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\n\r\nconst sleep = (waitTimeInMs: number) => new Promise(resolve => setTimeout(resolve, waitTimeInMs));\r\n\r\nconst endGame = async (gameId: number, winnerName: string): Promise<void> => {\r\n  const {games, players} = mongo;\r\n  const {io} = server;\r\n  const $game = await games.findOne({id: gameId});\r\n\r\n  if (!$game) { return; }\r\n\r\n  const {playerA, playerB} = $game;\r\n\r\n  if (winnerName === playerA.name) {\r\n    const $playerA = await players.findOne({\r\n      name: playerA.name\r\n    });\r\n    const $playerB = await players.findOne({\r\n      name: playerB.name\r\n    });\r\n\r\n    if (!$playerA || !$playerB) { return; }\r\n\r\n    $playerA.status = PlayerStatus.ONLINE;\r\n    $playerA.gameId = 0;\r\n    $playerB.status = PlayerStatus.ONLINE;\r\n    $playerB.gameId = 0;\r\n\r\n    if ($game.type === GameType.CASUAL || $game.type === GameType.RANKED) {\r\n      $playerA.experience += 110 + $game.currentTurn;\r\n\r\n      const aReq = 1000 + ($playerA.level % 10) * 100;\r\n      if ($playerA.experience >= aReq) {\r\n        const rem = $playerA.experience - aReq;\r\n        $playerA.level += 1;\r\n        $playerA.experience = rem;\r\n        // call levelup on chain, and save returned values, emit with gameEnded\r\n      }\r\n\r\n      $playerB.experience += 90 + $game.currentTurn;\r\n\r\n      const bReq = 1000 + ($playerB.level % 10) * 100;\r\n      if ($playerB.experience >= bReq) {\r\n        const rem = $playerB.experience - bReq;\r\n        $playerB.level += 1;\r\n        $playerB.experience = rem;\r\n        // call levelup on chain, and save returned values, emit with gameEnded\r\n      }\r\n    }\r\n\r\n    if ($game.type === GameType.CASUAL) {\r\n      $playerA.games.casual.won += 1;\r\n      $playerB.games.casual.lost += 1;\r\n    }\r\n\r\n    if ($game.type === GameType.RANKED) {\r\n      $playerA.games.ranked.won += 1;\r\n      $playerB.games.ranked.lost += 1;\r\n      $playerA.elo += 20;\r\n      $playerB.elo -= 20;\r\n    }\r\n\r\n    const $playerAReplace = await players.replaceOne({\r\n      name: playerA.name\r\n    }, $playerA);\r\n\r\n    const $playerBReplace = await players.replaceOne({\r\n      name: playerB.name\r\n    }, $playerB);\r\n\r\n    io.to($playerA.socketId).emit(\"gameEnded\" as any, {\r\n      isWinner: true,\r\n      gameType: $game.type,\r\n      experience: 110 + $game.currentTurn,\r\n      elo: $game.type === GameType.RANKED ? 20 : 0\r\n    });\r\n\r\n    io.to($playerB.socketId).emit(\"gameEnded\" as any, {\r\n      isWinner: false,\r\n      gameType: $game.type,\r\n      experience: 90 + $game.currentTurn,\r\n      elo: $game.type === GameType.RANKED ? -20 : 0\r\n    });\r\n\r\n\r\n\r\n  } else if (winnerName === playerB.name) {\r\n\r\n\r\n\r\n    const $playerB = await players.findOne({\r\n      name: playerB.name\r\n    });\r\n    const $playerA = await players.findOne({\r\n      name: playerA.name\r\n    });\r\n\r\n    if (!$playerB || !$playerA) { return; }\r\n\r\n    $playerB.status = PlayerStatus.ONLINE;\r\n    $playerB.gameId = 0;\r\n    $playerA.status = PlayerStatus.ONLINE;\r\n    $playerA.gameId = 0;\r\n\r\n    if ($game.type === GameType.CASUAL || $game.type === GameType.RANKED) {\r\n      $playerB.experience += 110 + $game.currentTurn;\r\n\r\n      const bReq = 1000 + ($playerB.level % 10) * 100;\r\n      if ($playerB.experience >= bReq) {\r\n        const rem = $playerB.experience - bReq;\r\n        $playerB.level += 1;\r\n        $playerB.experience = rem;\r\n        // call levelup on chain, and save returned values, emit with gameEnded\r\n      }\r\n\r\n      $playerA.experience += 90 + $game.currentTurn;\r\n\r\n      const aReq = 1000 + ($playerA.level % 10) * 100;\r\n      if ($playerA.experience >= aReq) {\r\n        const rem = $playerA.experience - aReq;\r\n        $playerA.level += 1;\r\n        $playerA.experience = rem;\r\n        // call levelup on chain, and save returned values, emit with gameEnded\r\n      }\r\n    }\r\n\r\n    if ($game.type === GameType.CASUAL) {\r\n      $playerB.games.casual.won += 1;\r\n      $playerA.games.casual.lost += 1;\r\n    }\r\n\r\n    if ($game.type === GameType.RANKED) {\r\n      $playerB.games.ranked.won += 1;\r\n      $playerA.games.ranked.lost += 1;\r\n      $playerB.elo += 20;\r\n      $playerA.elo -= 20;\r\n    }\r\n\r\n    const $playerBeplace = await players.replaceOne({\r\n      name: playerB.name\r\n    }, $playerB);\r\n\r\n    const $playerAReplace = await players.replaceOne({\r\n      name: playerA.name\r\n    }, $playerA);\r\n\r\n    io.to($playerB.socketId).emit(\"gameEnded\" as any, {\r\n      isWinner: true,\r\n      gameType: $game.type,\r\n      experience: 110 + $game.currentTurn,\r\n      elo: $game.type === GameType.RANKED ? 20 : 0\r\n    });\r\n\r\n    io.to($playerA.socketId).emit(\"gameEnded\" as any, {\r\n      isWinner: false,\r\n      gameType: $game.type,\r\n      experience: 90 + $game.currentTurn,\r\n      elo: $game.type === GameType.RANKED ? -20 : 0\r\n    });\r\n  }\r\n\r\n  const isDeletedGame = await games.deleteOne({id: gameId});\r\n\r\n  if (!isDeletedGame.deletedCount) { return; }\r\n};\r\n\r\nexport {endGame};\r\n","import {endGame} from \"./endGame\";\r\nimport type {Game, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\nconst drawCard = async (game: Game, player: GamePlayer, opponent: GamePlayer): Promise<void> => {\r\n  const card = opponent.deck.pop();\r\n\r\n  if (!card) {\r\n    return await endGame(game.id, player.name);\r\n  }\r\n\r\n  opponent.hand.push(card);\r\n};\r\n\r\nexport {drawCard};\r\n","import {cards} from \"@som/shared/data\";\r\nimport {CardType, GameType} from \"@som/shared/enums\";\r\nimport {buildDeck} from \"./buildDeck\";\r\nimport type {Game, Player} from \"@som/shared/types/backend\";\r\nimport type {GameCards, GameHeroCard} from \"@som/shared/types/backend/game\";\r\n\r\nconst generateGame = (\r\n  id: number,\r\n  type: GameType,\r\n  playerA: Player,\r\n  playerB: Player\r\n): Game => {\r\n  const playerASelectedDeck = playerA.decks.find(({id}) => id === playerA.deckId);\r\n  const playerBSelectedDeck = playerB.decks.find(({id}) => id === playerB.deckId);\r\n\r\n  if (!playerASelectedDeck || !playerBSelectedDeck) { return {} as Game; }\r\n\r\n  const playerAHand: GameCards = [];\r\n  const playerBHand: GameCards = [];\r\n  let playerADeck = buildDeck(playerASelectedDeck);\r\n  let playerBDeck = buildDeck(playerBSelectedDeck);\r\n\r\n  if (playerADeck.length !== 30 || playerBDeck.length !== 30) { return {} as Game; }\r\n\r\n  playerAHand.push(...playerADeck.slice(-5));\r\n  playerADeck = playerADeck.slice(0, -5);\r\n  playerBHand.push(...playerBDeck.slice(-5));\r\n  playerBDeck = playerBDeck.slice(0, -5);\r\n\r\n  const playerAHero = cards.find(({type, klass}) => klass === playerASelectedDeck.klass && type === CardType.HERO) as GameHeroCard;\r\n  const playerBHero = cards.find(({type, klass}) => klass === playerBSelectedDeck.klass && type === CardType.HERO) as GameHeroCard;\r\n\r\n  if (!playerAHero || !playerBHero) {\r\n    return {} as Game;\r\n  }\r\n\r\n  return {\r\n    id,\r\n    type,\r\n    currentPlayer: playerA.name,\r\n    currentTurn: 0,\r\n    gameLogs: [],\r\n    playerA: {\r\n      name: playerA.name,\r\n      hero: {\r\n        ...playerAHero,\r\n        maxHealth: 20,\r\n        maxMana: 10,\r\n        buffs: [],\r\n        debuffs: []\r\n      },\r\n      minion: {\r\n        a: undefined,\r\n        b: undefined,\r\n        c: undefined,\r\n        d: undefined\r\n      },\r\n      trap: undefined,\r\n      hand: playerAHand,\r\n      deck: playerADeck,\r\n      graveyard: [],\r\n      skins: playerA.skins\r\n    },\r\n    playerB: {\r\n      name: playerB.name,\r\n      hero: {\r\n        ...playerBHero,\r\n        maxHealth: 20,\r\n        maxMana: 10,\r\n        buffs: [],\r\n        debuffs: []\r\n      },\r\n      minion: {\r\n        a: undefined,\r\n        b: undefined,\r\n        c: undefined,\r\n        d: undefined\r\n      },\r\n      trap: undefined,\r\n      hand: playerBHand,\r\n      deck: playerBDeck,\r\n      graveyard: [],\r\n      skins: playerB.skins\r\n    },\r\n  };\r\n};\r\n\r\nexport {generateGame};\r\n","import {mongo} from \"apis\";\r\nimport type {WithId} from \"mongodb\";\r\nimport type {Game, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Response {\r\n  $game: WithId<Game>;\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst getGame = async (socketId: string): Promise<[Response | undefined, string]> => {\r\n  const {games, players} = mongo;\r\n  const $player = await players.findOne({socketId});\r\n\r\n  if (!$player) {\r\n    return [, \"Player not found, try relogging.\"];\r\n  }\r\n\r\n  const {name} = $player;\r\n  const id = $player.gameId;\r\n  const $game = await games.findOne({id});\r\n\r\n  if (!$game) {\r\n    return [, \"Game not found.\"];\r\n  }\r\n\r\n  const {playerA, playerB} = $game;\r\n  const player = playerA.name === name ? playerA : playerB;\r\n  const opponent = playerA.name === name ? playerB : playerA;\r\n\r\n  if ($game.currentPlayer !== player.name) {\r\n    return [, \"It's not your turn.\"];\r\n  }\r\n\r\n  return [{$game, player, opponent}, \"\"];\r\n};\r\n\r\nexport {getGame};\r\n","import {randomInt} from \"crypto\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\nconst getRandomMinion = (player: GamePlayer): GameMinionCard | undefined => {\r\n  const list: Array<GameMinionCard> = [];\r\n  const fields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  fields.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      list.push(minion);\r\n    }\r\n  });\r\n\r\n  return list[randomInt(list.length)];\r\n};\r\n\r\nexport {getRandomMinion};\r\n","import {endGame} from \"./endGame\";\r\nimport type {Game} from \"@som/shared/types/backend\";\r\n\r\nconst isGameOver = async (game: Game): Promise<boolean> => {\r\n  if (game.playerA.hero.health <= 0) {\r\n    await endGame(game.id, game.playerB.name);\r\n    return true;\r\n  } else if (game.playerB.hero.health <= 0) {\r\n    await endGame(game.id, game.playerA.name);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport {isGameOver};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Revenge {\r\n  player: GamePlayer;\r\n  field: Field;\r\n}\r\n\r\nconst revenge: Effect<Revenge> = (params) => {\r\n  const {player, field} = params;\r\n\r\n  const handCard = player.hand.find((card) => card.effect === EffectId.REVENGE) as GameMinionCard | undefined;\r\n  const deckCard = player.deck.find((card) => card.effect === EffectId.REVENGE) as GameMinionCard | undefined;\r\n\r\n  if (!handCard && !deckCard) {\r\n    return [false, \"No copy of the card found.\"];\r\n  }\r\n\r\n  if (handCard) {\r\n    const index = player.hand.indexOf(handCard);\r\n    player.minion[field] = handCard;\r\n    player.hand.splice(index, 1);\r\n  } else if (deckCard) {\r\n    const index = player.deck.indexOf(deckCard);\r\n    player.minion[field] = deckCard;\r\n    player.deck.splice(index, 1);\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {revenge};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {GameMinionCard, GameHeroCard} from \"@som/shared/types/backend/game\";\r\n\r\nconst insertBuff = (card: GameMinionCard | GameHeroCard, id: EffectId, data: any = {}) => {\r\n  // switch (id) {\r\n  //   case EffectId.BLAZE:\r\n  //     const hasAttackedTwice = true;\r\n  //     card.buffs.push({id, data: {hasAttackedTwice}});\r\n  //     break;\r\n  //   case EffectId.NECROMANCY:\r\n  //     card.health -= 2;\r\n  // }\r\n\r\n  card.buffs.push({id, data});\r\n\r\n\r\n  // card.buffs.push({id, data});\r\n  return [true, `Acidic Death buff added.`];\r\n};\r\n\r\nexport {insertBuff};\r\n","import {EffectId} from \"@som/shared/enums\";\nimport type {Effect} from \"@som/shared/types/backend\";\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\nimport {insertBuff} from \"../insertBuff\";\n\ninterface Unity {\n  player: GamePlayer;\n}\n\nconst unity: Effect<Unity> = (params) => {\n  const {player} = params;\n\n  const handCard = player.hand.find((card) => card.effect === EffectId.UNITY) as GameMinionCard | undefined;\n  const deckCard = player.deck.find((card) => card.effect === EffectId.UNITY) as GameMinionCard | undefined;\n\n  if (!handCard && !deckCard) {\n    return [false, \"No copy of the card found in hand or deck.\"];\n  }\n\n  if (handCard) {\n    insertBuff(handCard, EffectId.TAUNT);\n  } else if (deckCard) {\n    insertBuff(deckCard, EffectId.TAUNT);\n  }\n\n  return [true, \"\"];\n};\n\nexport {unity};\n","import {cards} from \"@som/shared/data\";\r\nimport {EffectId} from \"@som/shared/enums\";\r\nimport {revenge} from \"./triggerEffect/revenge\";\r\nimport {unity} from \"./triggerEffect/unity\";\r\nimport type {Field, GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\nconst moveToGraveyard = (player: GamePlayer, minion: GameMinionCard, field: Field): void => {\r\n  const hasRevengeBuff = minion.buffs.find((buff) => buff.id === EffectId.REVENGE) !== undefined;\r\n  const hasUnityBuff = minion.buffs.find((buff) => buff.id === EffectId.UNITY) !== undefined;\r\n\r\n  const card: any = cards.find((card) => card.id === minion.id);\r\n\r\n  if (!card) return;\r\n\r\n  minion.health = minion.maxHealth;\r\n  minion.damage = card.damage;\r\n  minion.buffs = [];\r\n  minion.debuffs = [];\r\n  player.graveyard.push(minion);\r\n  player.minion[field] = undefined;\r\n\r\n  if (hasRevengeBuff) {\r\n    revenge({player, field});\r\n  }\r\n\r\n  if (hasUnityBuff) {\r\n    unity({player});\r\n  }\r\n};\r\n\r\nexport {moveToGraveyard};\r\n","import {randomInt} from \"crypto\";\r\nimport {GameType, PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\n\r\nconst gamePopup = async (type: GameType, playerA: string, playerB: string) => {\r\n  const {gamePopups, players} = mongo;\r\n  const {io} = server;\r\n  const id = randomInt(1, 1000000001);\r\n\r\n  const [a, b] = await Promise.all([\r\n    players.findOneAndUpdate({\r\n      name: playerA\r\n    }, {\r\n      $set: {\r\n        gamePopupId: id\r\n      }\r\n    }, {\r\n      returnDocument: \"after\"\r\n    }),\r\n    players.findOneAndUpdate({\r\n      name: playerB\r\n    }, {\r\n      $set: {\r\n        gamePopupId: id\r\n      }\r\n    }, {\r\n      returnDocument: \"after\"\r\n    })\r\n  ]);\r\n\r\n  if (!a.value || !b.value) {\r\n    return;\r\n  }\r\n\r\n  const inserted = await gamePopups.insertOne({\r\n    id,\r\n    type,\r\n    playerA: {\r\n      name: a.value.name,\r\n      avatarId: 1,\r\n      level: a.value.level,\r\n      elo: a.value.elo,\r\n      hasAccepted: false\r\n    },\r\n    playerB: {\r\n      name: b.value.name,\r\n      avatarId: 1,\r\n      level: b.value.level,\r\n      elo: b.value.elo,\r\n      hasAccepted: false\r\n    }\r\n  });\r\n\r\n  if (!inserted.insertedId) {\r\n    return;\r\n  }\r\n\r\n  const acceptTimeout = setTimeout(async () => {\r\n    const $gamePopup = await gamePopups.findOne({id});\r\n    if (!$gamePopup) { return; }\r\n    if (!$gamePopup.playerA.hasAccepted || !$gamePopup.playerB.hasAccepted) {\r\n      \r\n      const pa = await players.findOneAndUpdate({\r\n        name: $gamePopup.playerA.name\r\n      }, {\r\n        $set: {\r\n          status: PlayerStatus.ONLINE,\r\n          gamePopupId: 0\r\n        }\r\n      });\r\n      const pb = await players.findOneAndUpdate({\r\n        name: $gamePopup.playerB.name\r\n      }, {\r\n        $set: {\r\n          status: PlayerStatus.ONLINE,\r\n          gamePopupId: 0\r\n        }\r\n      });\r\n\r\n      if (!pa.value || !pb.value) { return; }\r\n\r\nawait gamePopups.deleteOne({id});\r\n\r\n      io.to(pa.value.socketId).emit(\"declineGameSender\");\r\n      io.to(pb.value.socketId).emit(\"declineGameReceiver\");\r\n    }\r\n  }, 10_000);\r\n\r\n  io.to(a.value.socketId).emit(\"gamePopup\" as any);\r\n  io.to(b.value.socketId).emit(\"gamePopup\" as any);\r\n};\r\n\r\nexport {gamePopup};\r\n","import {mongo, server} from \"apis\";\r\nimport {generateGameView} from \"./generateGameFe\";\r\nimport type {Game} from \"@som/shared/types/backend\";\r\n\r\nconst saveGame = async (game: Game): Promise<void> => {\r\n  const {games, players} = mongo;\r\n  const {io} = server;\r\n  const {id, playerA, playerB} = game;\r\n\r\n  const [$updateGame, $playerA, $playerB] = await Promise.all([\r\n    games.replaceOne({id}, game),\r\n    players.findOne({\r\n      name: playerA.name\r\n    }),\r\n    players.findOne({\r\n      name: playerB.name\r\n    })\r\n  ]);\r\n\r\n  if (!$updateGame.modifiedCount || !$playerA || !$playerB) { return; }\r\n\r\n  io.to($playerA.socketId).emit(\"reloadGameState\", {\r\n    game: generateGameView(game, $playerA.name)\r\n  });\r\n\r\n  io.to($playerB.socketId).emit(\"reloadGameState\", {\r\n    game: generateGameView(game, $playerB.name)\r\n  });\r\n};\r\n\r\nexport {saveGame};\r\n","import {GameType, PlayerStatus, QueueId} from \"@som/shared/enums\";\nimport {mongo, server} from \"apis\";\nimport {generateGame} from \"./generateGame\";\nimport {generateGameView} from \"./generateGameFe\";\n\nconst startGame = async (\n  id: number,\n  type: GameType,\n  playerA: string,\n  playerB: string\n): Promise<void> => {\n  const {accounts, games, players} = mongo;\n  const {io} = server;\n  const [$playerA, $playerB, $accountA, $accountB] = await Promise.all([\n    players.findOneAndUpdate({\n      name: playerA\n    }, {\n      $set: {\n        status: PlayerStatus.IN_GAME,\n        queueId: QueueId.NONE,\n        lobbyId: 0,\n        gamePopupId: 0,\n        gameId: id\n      }\n    }),\n    players.findOneAndUpdate({\n      name: playerB\n    }, {\n      $set: {\n        status: PlayerStatus.IN_GAME,\n        queueId: QueueId.NONE,\n        lobbyId: 0,\n        gamePopupId: 0,\n        gameId: id\n      }\n    }),\n    accounts.findOne({\n      name: playerA\n    }),\n    accounts.findOne({\n      name: playerB\n    }),\n  ]);\n\n  if (!$playerA.value || !$playerB.value || !$accountA || !$accountB) {\n    return;\n  }\n\n  const game = generateGame(id, type, $playerA.value, $playerB.value);\n  const isInserted = await games.insertOne(game);\n\n  if (!isInserted.insertedId) {\n    return;\n  }\n\n  io.to($playerA.value.socketId).emit(\"startGame\" as any, {\n    playerA: {\n      name: $playerA.value.name,\n      avatarId: $accountA.avatarId,\n      level: $playerA.value.level,\n      elo: $playerA.value.elo\n    },\n    playerB: {\n      name: $playerB.value.name,\n      avatarId: $accountB.avatarId,\n      level: $playerB.value.level,\n      elo: $playerB.value.elo\n    },\n    game: generateGameView(game, $playerA.value.name)\n  });\n\n  io.to($playerB.value.socketId).emit(\"startGame\" as any, {\n    playerA: {\n      name: $playerA.value.name,\n      avatarId: $accountA.avatarId,\n      level: $playerA.value.level,\n      elo: $playerA.value.elo\n    },\n    playerB: {\n      name: $playerB.value.name,\n      avatarId: $accountB.avatarId,\n      level: $playerB.value.level,\n      elo: $playerB.value.elo\n    },\n    game: generateGameView(game, $playerB.value.name)\n  });\n};\n\nexport {startGame};\n\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface LastStand {\r\n  minion: GameMinionCard;\r\n  opponent: GamePlayer;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst lastStand: Effect<LastStand> = (params) => {\r\n  const {minion, opponent, trap} = params;\r\n\r\n  minion.health = 1;\r\n  minion.buffs.push({id: EffectId.TAUNT, data: {}});\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"Last stand triggered\"];\r\n};\r\n\r\nexport {lastStand};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {heartOfSteel} from \"./triggerEffect/heartOfSteel\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\nconst deductHealth2 = (\r\n  player: GamePlayer,\r\n  minion: GameMinionCard,\r\n  damage: number\r\n): void => {\r\n  const shieldBuff = minion.buffs.find((buff) => buff.id === EffectId.SHIELD);\r\n\r\n  if (shieldBuff) { // has shield\r\n    const amt = shieldBuff.data.amount;\r\n\r\n    if (amt > damage) { // shield reduced\r\n      shieldBuff.data.amount -= damage\r\n    } else if (amt <= damage) { // shield broken\r\n      if (player.trap && player.trap.effect === EffectId.HEART_OF_STEEL) {\r\n        heartOfSteel({minion, player, trap: player.trap});\r\n      }\r\n\r\n      const remaining = shieldBuff.data.amount - damage;\r\n\r\n      if (remaining < 0) {\r\n        if (minion.buffs.find((buff) => buff.id === EffectId.RESILIENT)) {\r\n          minion.health -= 1;\r\n        } else {\r\n          minion.health -= remaining;\r\n        }\r\n      }\r\n\r\n      const index = minion.buffs.indexOf(shieldBuff);\r\n      minion.buffs.splice(index, 1);\r\n    }\r\n  } else { // no shield\r\n    if (minion.buffs.find((buff) => buff.id === EffectId.RESILIENT)) {\r\n      minion.health -= 1;\r\n    } else {\r\n      minion.health -= damage;\r\n    }\r\n  }\r\n};\r\n\r\nexport {deductHealth2};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface SelfDesctruct {\r\n  player: GamePlayer;\r\n}\r\n\r\nconst selfDestruct: Effect<SelfDesctruct> = (params) => {\r\n  params.player.hero.health -= 3;\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {selfDestruct};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport {lastStand} from \"./lastStand\";\r\nimport {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport {deductHealth2} from \"../deductHealth2\";\r\nimport { selfDestruct } from \"./selfDestruct\";\r\nimport { isGameOver } from \"../isGameOver\";\r\n\r\ninterface AcidicDeath {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst acidicDeath: Effect<AcidicDeath> = (params) => {\r\n  const {player, opponent} = params;\r\n  const playerMinionKeys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n  const opponentMinionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  playerMinionKeys.forEach((key) => {\r\n    const minion = player.minion[key];\r\n\r\n    if (!minion) { return; }\r\n\r\n    deductHealth2(player, minion, 1);\r\n\r\n    if (minion.health <= 0) {\r\n      const {trap} = player;\r\n\r\n      if (trap && trap.effect === EffectId.LAST_STAND) {\r\n        lastStand({minion, opponent: player, trap})\r\n      } else {\r\n        const hasAcidicDeathBuff = minion.buffs.find((buff) => buff.id === EffectId.ACIDIC_DEATH);\r\n\r\n        moveToGraveyard(player, minion, key);\r\n\r\n        if (hasAcidicDeathBuff) {\r\n          acidicDeath({player, opponent});\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  opponentMinionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (!minion) { return; }\r\n\r\n    deductHealth2(opponent, minion, 1);\r\n\r\n    if (minion.health <= 0) {\r\n      const {trap} = opponent;\r\n\r\n      if (trap && trap.effect === EffectId.LAST_STAND) {\r\n        lastStand({minion, opponent, trap})\r\n      } else {\r\n        const hasAcidicDeathBuff = minion.buffs.find((buff) => buff.id === EffectId.ACIDIC_DEATH);\r\n        const hasSelfDescturctDebuff = minion.debuffs.find((debuff) => debuff.id === EffectId.SELF_DESTRUCT);\r\n\r\n        moveToGraveyard(opponent, minion, key);\r\n\r\n        if (hasSelfDescturctDebuff) {\r\n          selfDestruct({player}); // check for endgame? find a better way to call onDeath effects?\r\n        }\r\n\r\n        if (hasAcidicDeathBuff) {\r\n          acidicDeath({player, opponent});\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  return [true, \"Acidic Death triggered.\"];\r\n};\r\n\r\nexport {acidicDeath};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Banish {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n  trap: GameTrapCard;\r\n  field: Field;\r\n}\r\n\r\nconst banish: Effect<Banish> = (params) => {\r\n  const {player, opponent, minion, trap, field} = params;\r\n\r\n  player.minion[field] = undefined;\r\n  player.hand.push(minion);\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {banish};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface ShadowSurge {\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst shadowSurge: Effect<ShadowSurge> = (params) => {\r\n  params.minion.canAttack = true;\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {shadowSurge};\r\n","import {EffectId} from \"@som/shared/enums\";\nimport type {Effect} from \"@som/shared/types/backend\";\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\n\ninterface Diminish {\n  opponent: GamePlayer;\n  field?: Field;\n}\n\nconst diminish: Effect<Diminish> = (params) => {\n  const {opponent, field} = params;\n\n  if (!field) {\n    return [false, \"Field for Effect not specified.\"];\n  }\n\n  const card = opponent.minion[field];\n\n  if (!card) {\n    return [false, `Minion doesn't exist on the field ${field}.`];\n  }\n\n  if (card.buffs.find((buff) => buff.id === EffectId.ELUSIVE) !== undefined) {\n    return [false, \"Diminish negated.\"];\n  }\n\n  if (card.damage > 2) {\n    card.damage -= 2;\n  } else {\n    card.damage = 0;\n  }\n\n  card.debuffs.push({\n    id: EffectId.DIMINISH,\n    data: {damage: -2}\n  });\n\n  return [true, `\n    Player ${opponent.name} has played Diminish magic card, reducing your card on\n    the field ${field} Damage by 2.\n  `];\n};\n\nexport {diminish};\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Frostbite {\r\n  minion: GameMinionCard;\r\n  player: GamePlayer;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst frostbite: Effect<Frostbite> = (params) => {\r\n  const {minion, player, trap} = params;\r\n\r\n  minion.damage = 1;\r\n  player.graveyard.push(trap);\r\n  player.trap = undefined;\r\n\r\n  return [true, `Frostbite triggered`];\r\n};\r\n\r\nexport {frostbite};\r\n","import {randomInt} from \"crypto\";\r\nimport {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\nimport { insertBuff } from \"../insertBuff\";\r\n\r\ninterface Glory {\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst glory: Effect<Glory> = (params) => {\r\n  const {opponent, minion} = params;\r\n  const possibleMinions: Array<{Minion: GameMinionCard, key: keyof typeof opponent.minion}> = [];\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const Minion = opponent.minion[key];\r\n\r\n    if (Minion) {\r\n      const hasElusiveBuff = Minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        possibleMinions.push({Minion, key});\r\n      }\r\n    }\r\n  });\r\n\r\n  if (possibleMinions.length) {\r\n    let randomMinion = randomInt(possibleMinions.length);\r\n    let {Minion, key} = possibleMinions[randomMinion];\r\n\r\n    deductHealth2(opponent, Minion, 2);\r\n\r\n    if (minion.health <= 0) {\r\n      moveToGraveyard(opponent, Minion, key);\r\n      insertBuff(minion, EffectId.TAUNT); // refactor this, minion = player, Minion = opponent\r\n    }\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {glory};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface MirrorsEdge {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst mirrorsEdge: Effect<MirrorsEdge> = (params) => {\r\n  const {player, opponent, minion, trap} = params;\r\n\r\n  player.hero.health -= minion.damage;\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {mirrorsEdge};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface RisingFury {\r\n  minionCard: GameMinionCard;\r\n}\r\n\r\nconst risingFury: Effect<RisingFury> = (params) => {\r\n  const {minionCard} = params;\r\n\r\n  minionCard.health += 1;\r\n  minionCard.damage += 1;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {risingFury};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Blaze {\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst blaze: Effect<Blaze> = (params) => {\r\n  const blazeBuff = params.minion.buffs.find((buff) => buff.id === EffectId.BLAZE);\r\n\r\n  if (!blazeBuff) {\r\n    return [false, \"Blaze buff not found.\"];\r\n  }\r\n\r\n  blazeBuff.data.hasAttackedTwice = false;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {blaze};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Necromancy {\r\n  minion: GameMinionCard;\r\n  isPositive: boolean;\r\n}\r\n\r\nconst necromancy: Effect<Necromancy> = (params) => {\r\n  const {minion, isPositive} = params;\r\n\r\n  if (isPositive) {\r\n    minion.health += 2;\r\n    minion.damage += 2;\r\n  } else {\r\n    minion.health -= 2;\r\n    minion.damage -= 2;\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {necromancy};\r\n","import {randomInt} from \"crypto\";\r\nimport {EffectId} from \"@som/shared/enums\";\r\nimport {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\n\r\ninterface QuickShot {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst quickShot: Effect<QuickShot> = (params) => {\r\n  const {opponent} = params;\r\n  const possibleMinions: Array<{minion: GameMinionCard, key: keyof typeof opponent.minion}> = [];\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        possibleMinions.push({minion, key});\r\n      }\r\n    }\r\n  });\r\n\r\n  if (possibleMinions.length) {\r\n    let randomMinion = randomInt(possibleMinions.length);\r\n    let {minion, key} = possibleMinions[randomMinion];\r\n\r\n    deductHealth2(opponent, minion, 2);\r\n\r\n    if (minion.health <= 0) {\r\n      moveToGraveyard(opponent, minion, key);\r\n    }\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {quickShot};\r\n","import {CardType, EffectId} from \"@som/shared/enums\";\nimport type {Effect} from \"@som/shared/types/backend\";\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\n\ninterface Rebirth {\n  player: GamePlayer;\n  target?: number;\n  field?: Field;\n}\n\nconst rebirth: Effect<Rebirth> = (params) => {\n  const {player, target, field} = params;\n\n  if (!target) {\n    return [false, \"Target for revival not specified.\"];\n  }\n\n  if (!field) {\n    return [false, \"Field for Special Summon not specified.\"];\n  }\n\n  if (player.minion[field]) {\n    return [false, `Minion already exists on the field ${field}.`];\n  }\n\n  const toRevive = player.graveyard.find((card) => card.gid === target);\n\n  if (!toRevive) {\n    return [false, \"Card with the given ID not found in the graveyard.\"];\n  }\n\n  if (toRevive.type !== CardType.MINION) {\n    return [false, \"Selected card for revival must be a Minion.\"];\n  }\n\n  if (toRevive.effect === EffectId.ELUSIVE) {\n    return [false, \"Rebirth negated.\"];\n  }\n\n  if (toRevive.effect === EffectId.NECROMANCY) {\n    toRevive.damage += 2;\n    toRevive.health += 2;\n    toRevive.buffs.push({\n      id: EffectId.NECROMANCY,\n      data: {damage: 2, health: 2}\n    });\n  }\n\n  if (toRevive.effect === EffectId.PROTECTOR) {\n    toRevive.buffs.push({id: EffectId.SHIELD, data: {amount: 3}});\n  }\n\n  player.minion[field] = toRevive;\n  player.graveyard.splice(player.graveyard.indexOf(toRevive), 1);\n\n  return [true, \"Successfully revived.\"];\n};\n\nexport {rebirth};\n","import type {Effect} from \"@som/shared/types/backend\";\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\n\ninterface Reload {\n  player: GamePlayer;\n}\n\nconst reload: Effect<Reload> = (params) => {\n  const {player} = params;\n  const drawnCard = player.deck.pop();\n\n  if (!drawnCard) {\n    return [false, \"You have no cards remaining to draw.\"];\n  }\n\n  player.hand.push(drawnCard);\n\n  return [true, \"\"];\n};\n\nexport {reload};\n","import { EffectId } from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { randomInt } from \"crypto\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\n\r\ninterface Ricochet {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  minionCard: GameMinionCard;\r\n  trapCard: GameTrapCard;\r\n}\r\n\r\nconst ricochet: Effect<Ricochet> = (params) => {\r\n  const {player, opponent, minionCard, trapCard} = params;\r\n\r\n  const possibleMinions: Array<{minion: GameMinionCard, key: keyof typeof opponent.minion}> = [];\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        possibleMinions.push({minion, key});\r\n      }\r\n    }\r\n  });\r\n\r\n  if (possibleMinions.length) {\r\n    let randomMinion = randomInt(possibleMinions.length);\r\n    let {minion, key} = possibleMinions[randomMinion];\r\n\r\n    deductHealth2(opponent, minion, minionCard.damage);\r\n\r\n    if (minion.health <= 0) {\r\n      moveToGraveyard(opponent, minion, key);\r\n    }\r\n  }\r\n\r\n  opponent.graveyard.push(trapCard);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {ricochet};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertBuff} from \"../insertBuff\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Shell {\r\n  player: GamePlayer;\r\n}\r\n\r\nconst shell = (params: Shell): any => {\r\n  const {player} = params;\r\n  const keys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  keys.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      const shieldBuff = minion.buffs.find((buff) => buff.id === EffectId.SHIELD);\r\n      const unbreakableBuff = minion.buffs.find((buff) => buff.id === EffectId.UNBREAKABLE);\r\n      const amount = unbreakableBuff ? 2 : 1;\r\n\r\n      if (shieldBuff) {\r\n        shieldBuff.data.amount += amount;\r\n      } else {\r\n        insertBuff(minion, EffectId.SHIELD, {amount});\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport {shell};\r\n","const getAdjacentMinions = (field: \"a\" | \"b\" | \"c\" | \"d\") => {\r\n  const adjacentFields = [];\r\n\r\n  switch (field) {\r\n    case \"a\":\r\n      adjacentFields.push(\"b\");\r\n      break;\r\n    case \"b\":\r\n      adjacentFields.push(\"a\", \"c\");\r\n      break;\r\n    case \"c\":\r\n      adjacentFields.push(\"b\", \"d\");\r\n      break;\r\n    case \"d\":\r\n      adjacentFields.push(\"c\");\r\n      break;\r\n  }\r\n\r\n  return adjacentFields;\r\n};\r\n\r\nexport {getAdjacentMinions};\r\n","import {EffectId} from \"@som/shared/enums\";\nimport {getAdjacentMinions} from \"../getAdjacentMinions\";\nimport {insertBuff} from \"../insertBuff\";\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\n\ninterface Shieldwall {\n  player: GamePlayer;\n  field: Field;\n}\n\nconst shieldwall = (params: Shieldwall): void => {\n  const {player, field} = params;\n  const fields = getAdjacentMinions(field);\n\n  fields.forEach((field) => {\n    const minion = player.minion[field as keyof typeof player.minion];\n\n    if (minion) {\n      const shieldBuff = minion.buffs.find((buff) => buff.id === EffectId.SHIELD);\n      const unbreakableBuff = minion.buffs.find((buff) => buff.id === EffectId.UNBREAKABLE);\n      const amount = unbreakableBuff ? 2 : 1;\n\n      if (shieldBuff) {\n        shieldBuff.data.amount += amount;\n      } else {\n        insertBuff(minion, EffectId.SHIELD, {amount});\n      }\n    }\n  });\n};\n\nexport {shieldwall};\n","import type {Effect} from \"@som/shared/types/backend\";\nimport type {GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\n\ninterface Silence {\n  opponent: GamePlayer;\n  trap: GameTrapCard;\n}\n\nconst silence: Effect<Silence> = (params) => {\n  const {opponent, trap} = params;\n\n  opponent.graveyard.push(trap);\n  opponent.trap = undefined;\n\n  return [true, \"\"]\n};\n\nexport {silence};\n","import {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Smite {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n  trap: GameTrapCard;\r\n  field: Field;\r\n}\r\n\r\nconst smite: Effect<Smite> = (params) => {\r\n  const {player, opponent, minion, trap, field} = params;\r\n\r\n  moveToGraveyard(player, minion, field);\r\n\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {smite};\r\n","import {CardType, EffectId} from \"@som/shared/enums\";\r\nimport {insertBuff} from \"../insertBuff\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Spellweave {\r\n  player: GamePlayer;\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst spellweave: Effect<Spellweave> = (params) => {\r\n  const {player, minion} = params;\r\n\r\n  const amount = player.graveyard.reduce((sum, card) => {\r\n    if (card.type === CardType.MAGIC) {\r\n      return sum += 1;\r\n    }\r\n\r\n    return sum;\r\n  }, 0);\r\n\r\n  insertBuff(minion, EffectId.SHIELD, {amount});\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {spellweave};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {GameMinionCard, GameHeroCard} from \"@som/shared/types/backend/game\";\r\n\r\nconst insertDebuff = (card: GameMinionCard | GameHeroCard, id: EffectId, data: any = {}) => {\r\n  card.debuffs.push({id, data});\r\n  return [true, \"Debuff added.\"];\r\n};\r\n\r\nexport {insertDebuff};\r\n","import {randomInt} from \"crypto\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { EffectId } from \"@som/shared/enums\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\nimport { deductHealth } from \"../deductHealth\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\nimport { insertDebuff } from \"../insertDebuff\";\r\n\r\ninterface ToxicSpray {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst toxicSpray: Effect<ToxicSpray> = (params) => {\r\n  const {opponent} = params;\r\n  const possibleMinions: Array<{minion: GameMinionCard, key: keyof typeof opponent.minion}> = [];\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        possibleMinions.push({minion, key});\r\n      }\r\n    }\r\n  });\r\n\r\n  if (possibleMinions.length) {\r\n    let randomMinion = randomInt(possibleMinions.length);\r\n    let {minion, key} = possibleMinions[randomMinion];\r\n\r\n    deductHealth2(opponent, minion, 1);\r\n    insertDebuff(minion, EffectId.NEUROTOXIN);\r\n\r\n    if (minion.health <= 0) {\r\n      moveToGraveyard(opponent, minion, key);\r\n    }\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {toxicSpray};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Valor {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst valor: Effect<Valor> = (params) => {\r\n  const {opponent} = params;\r\n\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n  let totalDamage = 0;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const shieldBuff = minion.buffs.find((buff) => buff.id === EffectId.SHIELD);\r\n\r\n      if (shieldBuff) {\r\n        totalDamage += shieldBuff.data.amount;\r\n        minion.buffs.splice(minion.buffs.indexOf(shieldBuff, 1));\r\n      }\r\n    }\r\n  });\r\n\r\n  opponent.hero.health -= totalDamage;\r\n\r\n  return [true, \"\"]\r\n};\r\n\r\nexport {valor};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\nimport { insertBuff } from \"../insertBuff\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\n\r\ninterface Fortitude {\r\n  player: GamePlayer;\r\n  field: Field | undefined;\r\n}\r\n\r\nconst fortitude: Effect<Fortitude> = (params) => {\r\n  const {player, field} = params;\r\n\r\n  if (!field) {\r\n    return [false, \"Field not specified.\"];\r\n  }\r\n\r\n  const minion = player.minion[field];\r\n\r\n  if (!minion) {\r\n    return [false, `No minion on the ${field} field.`];\r\n  }\r\n\r\n  deductHealth2(player, minion, 1);\r\n\r\n  if (minion.health > 0) {\r\n    insertBuff(minion, EffectId.TAUNT);\r\n  } else {\r\n    moveToGraveyard(player, minion, field);\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {fortitude};\r\n","import { EffectId } from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { randomInt } from \"crypto\";\r\n\r\ninterface Regeneration {\r\n  player: GamePlayer;\r\n}\r\n\r\nconst regeneration: Effect<Regeneration> = (params) => {\r\n  const {player} = params;\r\n  const minionKeys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n  const possibleKeys: Array<\"a\" | \"b\" | \"c\" | \"d\"> = [];\r\n\r\n  minionKeys.forEach((key) => {\r\n    const Minion = player.minion[key];\r\n    if (!Minion) { return; }\r\n\r\n    if (Minion.buffs.find((buff) => buff.id !== EffectId.REGENERATION)) {\r\n      possibleKeys.push(key);\r\n    }\r\n  });\r\n\r\n  if (possibleKeys.length) {\r\n    const rand = randomInt(possibleKeys.length)\r\n    const min = player.minion[possibleKeys[rand]];\r\n    if (!min) { return [false, \"\"]; }\r\n    min.health += 2;\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {regeneration};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Leech {\r\n  player: GamePlayer;\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst leech: Effect<Leech> = (params) => {\r\n  const {player, minion} = params;\r\n  player.hero.health += minion.damage;\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {leech};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface ElectroShock {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst electroShock: Effect<ElectroShock> = (params) => {\r\n  const {player, opponent} = params;\r\n  const playerMinionFields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n  const opponentMinionFields = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  playerMinionFields.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      minion.buffs = [];\r\n      minion.debuffs = [];\r\n    }\r\n  });\r\n\r\n  opponentMinionFields.forEach((field) => {\r\n    const minion = opponent.minion[field];\r\n\r\n    if (minion) {\r\n      minion.buffs = [];\r\n      minion.debuffs = [];\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {electroShock};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Cleanse {\r\n  player: GamePlayer;\r\n  field: Field | undefined;\r\n}\r\n\r\nconst cleanse: Effect<Cleanse> = (params) => {\r\n  const {player, field} = params;\r\n\r\n  if (!field) {\r\n    return [false, \"Field not specified.\"];\r\n  }\r\n\r\n  const minion = player.minion[field];\r\n\r\n  if (!minion) {\r\n    return [false, `No minion on the ${field} field.`];\r\n  }\r\n\r\n  minion.debuffs = [];\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {cleanse};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface TidalWave {\r\n  player: GamePlayer;\r\n}\r\n\r\nconst tidalWave: Effect<TidalWave> = (params) => {\r\n  const {player} = params;\r\n  const playerMinionFields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  playerMinionFields.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      minion.health += 3;\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {tidalWave};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { getAdjacentMinions } from \"../getAdjacentMinions\";\r\n\r\ninterface RisingFury {\r\n  player: GamePlayer;\r\n  field: Field;\r\n}\r\n\r\nconst retribution: Effect<RisingFury> = (params) => {\r\n  const {player, field} = params;\r\n  const adj = getAdjacentMinions(field);\r\n\r\n  adj.forEach((field) => {\r\n    const minj = player.minion[field];\r\n    if (!minj) return;\r\n    minj.damage -= 2;\r\n    if (minj.damage <= 0) {\r\n      minj.damage = 0;\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {retribution};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface CorrosiveTouch {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst corrosiveTouch: Effect<CorrosiveTouch> = (params) => {\r\n  const {opponent} = params;\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n  let damageToHero = 0;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        const hasNeurotoxinDebuff = minion.debuffs.find((debuff) => debuff.id === EffectId.NEUROTOXIN);\r\n\r\n        if (hasNeurotoxinDebuff) {\r\n          damageToHero += 1;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  opponent.hero.health -= damageToHero;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {corrosiveTouch};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { insertBuff } from \"../insertBuff\";\r\n\r\ninterface ToxicGas {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst toxicGas: Effect<ToxicGas> = (params) => {\r\n  const {opponent} = params;\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        insertBuff(minion, EffectId.NEUROTOXIN);\r\n      }\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {toxicGas};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { randomInt } from \"crypto\";\r\nimport { insertDebuff } from \"../insertDebuff\";\r\n\r\ninterface AcidRain {\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst acidRain: Effect<AcidRain> = (params) => {\r\n  const {opponent} = params;\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n  const possibleMinions: Array<GameMinionCard> = [];\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        possibleMinions.push(minion);\r\n      }\r\n    }\r\n  });\r\n\r\n  const minion1 = possibleMinions[randomInt(possibleMinions.length)];\r\n  const minion2 = possibleMinions[randomInt(possibleMinions.length)];\r\n\r\n  insertDebuff(minion1, EffectId.NEUROTOXIN);\r\n  insertDebuff(minion2, EffectId.NEUROTOXIN);\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {acidRain};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertBuff} from \"../insertBuff\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface SmokeBomb {\r\n  player: GamePlayer;\r\n}\r\n\r\nconst smokeBomb: Effect<SmokeBomb> = (params) => {\r\n  const {player} = params;\r\n  const minionKeys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = player.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        insertBuff(minion, EffectId.STEALTH);\r\n      }\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {smokeBomb};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertDebuff} from \"../insertDebuff\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface ContaminatedAir {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n}\r\n\r\nconst contaminatedAir: Effect<ContaminatedAir> = (params) => {\r\n  const {player, opponent} = params;\r\n  const minionKeys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n  const opponentMinionKeys = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = player.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        if (minion.damage > 0) {\r\n          minion.damage -= 1;\r\n        }\r\n\r\n        insertDebuff(minion, EffectId.CONTAMINATED_AIR);\r\n      }\r\n    }\r\n  });\r\n\r\n  opponentMinionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        if (minion.damage > 0) {\r\n          minion.damage -= 1;\r\n        }\r\n\r\n        insertDebuff(minion, EffectId.CONTAMINATED_AIR);\r\n      }\r\n    }\r\n  });\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {contaminatedAir};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\n\r\ninterface NoxiousFumes {\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n  field: Field;\r\n}\r\n\r\nconst noxiousFumes: Effect<NoxiousFumes> = (params) => {\r\n  const {opponent, minion, field} = params;\r\n  const minionKeys = Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>;\r\n  let damage = 0;\r\n\r\n  minionKeys.forEach((key) => {\r\n    const minion = opponent.minion[key];\r\n\r\n    if (minion) {\r\n      const hasElusiveBuff = minion.buffs.find((buff) => buff.id === EffectId.ELUSIVE);\r\n\r\n      if (!hasElusiveBuff) {\r\n        const hasNeurotoxinDebuff = minion.debuffs.find((debuff) => debuff.id === EffectId.NEUROTOXIN);\r\n\r\n        if (hasNeurotoxinDebuff) {\r\n          damage += 1;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  deductHealth2(opponent, minion, damage);\r\n\r\n  if (minion.health <= 0) {\r\n    moveToGraveyard(opponent, minion, field);\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {noxiousFumes};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertDebuff} from \"../insertDebuff\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface PoisonedGround {\r\n  player: GamePlayer;\r\n  minion: GameMinionCard;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst poisonedGround: Effect<PoisonedGround> = (params) => {\r\n  const {player, minion, trap} = params;\r\n\r\n  insertDebuff(minion, EffectId.NEUROTOXIN);\r\n  player.graveyard.push(trap);\r\n  player.trap = undefined;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {poisonedGround};\r\n","import {randomInt} from \"crypto\";\r\nimport {EffectId} from \"@som/shared/enums\";\r\nimport {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\nimport { deductHealth2 } from \"../deductHealth2\";\r\n\r\ninterface Rampage {\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst rampage: Effect<Rampage> = (params) => {\r\n  params.minion.damage += 1;\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {rampage};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Backstab {\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n}\r\n\r\nconst backstab: Effect<Backstab> = (params) => {\r\n  const {opponent, minion} = params;\r\n\r\n  opponent.hero.mana -= 1;\r\n  minion.damage += 2;\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {backstab};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Overpower {\r\n  opponent: GamePlayer;\r\n  damage: number;\r\n}\r\n\r\nconst overpower: Effect<Overpower> = (params) => {\r\n  const {opponent, damage} = params;\r\n  opponent.hero.health -= damage;\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {overpower};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Ignite {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  field?: Field;\r\n}\r\n\r\nconst ignite: Effect<Ignite> = (params) => {\r\n  const {player, opponent, field} = params;\r\n\r\n  if (!field) {\r\n    return [false, \"Field for Effect not specified.\"];\r\n  }\r\n\r\n  const card = opponent.minion[field];\r\n\r\n  if (!card) {\r\n    return [false, `Minion doesn't exist on the field ${field}.`];\r\n  }\r\n\r\n  if (card.buffs.find((buff) => buff.id === EffectId.ELUSIVE)) {\r\n    return [false, \"Ignite negated.\"];\r\n  }\r\n\r\n  card.health -= 2;\r\n\r\n  if (card.health <= 0) {\r\n    moveToGraveyard(opponent, card, field);\r\n\r\n    const drawnCard = player.deck.pop();\r\n\r\n    if (drawnCard) {\r\n      player.hand.push(drawnCard);\r\n    }\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {ignite};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertBuff} from \"../insertBuff\";\r\nimport {moveToGraveyard} from \"../moveToGraveyard\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Corruption {\r\n  player: GamePlayer;\r\n  field?: Field;\r\n}\r\n\r\nconst corruption: Effect<Corruption> = (params) => {\r\n  const {player, field} = params;\r\n\r\n  if (!field) {\r\n    return [false, \"Field for Effect not specified.\"];\r\n  }\r\n\r\n  const card = player.minion[field];\r\n\r\n  if (!card) {\r\n    return [false, `Minion doesn't exist on the field ${field}.`];\r\n  }\r\n\r\n  if (card.buffs.find((buff) => buff.id === EffectId.ELUSIVE)) {\r\n    return [false, \"Corruption negated.\"];\r\n  }\r\n\r\n  card.health -= 2;\r\n\r\n  if (card.health <= 0) {\r\n    moveToGraveyard(player, card, field);\r\n  } else {\r\n    insertBuff(card, EffectId.OVERCHARGE);\r\n  }\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {corruption};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport {insertBuff} from \"../insertBuff\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Hysteria {\r\n  player: GamePlayer;\r\n  field?: Field;\r\n}\r\n\r\nconst hysteria: Effect<Hysteria> = (params) => {\r\n  const {player, field} = params;\r\n\r\n  if (!field) {\r\n    return [false, \"Field for Effect not specified.\"];\r\n  }\r\n\r\n  const card = player.minion[field];\r\n\r\n  if (!card) {\r\n    return [false, `Minion doesn't exist on the field ${field}.`];\r\n  }\r\n\r\n  if (card.buffs.find((buff) => buff.id === EffectId.ELUSIVE)) {\r\n    return [false, \"Hysteria negated.\"];\r\n  }\r\n\r\n  card.damage *= 2;\r\n  card.health = 1;\r\n\r\n  insertBuff(card, EffectId.HYSTERIA);\r\n\r\n  return [true, \"\"];\r\n};\r\n\r\nexport {hysteria};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { getAdjacentMinions } from \"../getAdjacentMinions\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\n\r\ninterface Explosive {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  trap: GameTrapCard;\r\n  field: Field;\r\n}\r\n\r\nconst explosive: Effect<Explosive> = (params) => {\r\n  const {player, opponent, trap, field} = params;\r\n\r\n  const fields = getAdjacentMinions(field) as Field[];\r\n\r\n  fields.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      minion.health -= 2;\r\n      if (minion.health <= 0) {\r\n        moveToGraveyard(player, minion, field);\r\n      }\r\n    }\r\n  });\r\n\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"Last stand triggered\"];\r\n};\r\n\r\nexport {explosive};\r\n","import type {Effect} from \"@som/shared/types/backend\";\r\nimport type {Field, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\nimport { getAdjacentMinions } from \"../getAdjacentMinions\";\r\nimport { moveToGraveyard } from \"../moveToGraveyard\";\r\nimport { insertBuff } from \"../insertBuff\";\r\nimport { EffectId } from \"@som/shared/enums\";\r\n\r\ninterface Reflection {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst reflection: Effect<Reflection> = (params) => {\r\n  const {player, opponent, trap} = params;\r\n  const fields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  fields.forEach((field) => {\r\n    const minion = player.minion[field];\r\n\r\n    if (minion) {\r\n      insertBuff(minion, EffectId.OVERCHARGE);\r\n    }\r\n  });\r\n\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"Last stand triggered\"];\r\n};\r\n\r\nexport {reflection};\r\n","import { EffectId } from \"@som/shared/enums\";\r\nimport type {Effect} from \"@som/shared/types/backend\";\r\nimport type {GameMinionCard, GamePlayer, GameTrapCard} from \"@som/shared/types/backend/game\";\r\n\r\ninterface Constriction {\r\n  player: GamePlayer;\r\n  opponent: GamePlayer;\r\n  minion: GameMinionCard;\r\n  trap: GameTrapCard;\r\n}\r\n\r\nconst constriction: Effect<Constriction> = (params) => {\r\n  const {player, opponent, minion, trap} = params;\r\n  const fields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n  const sum = fields.reduce((amount, field) => {\r\n    const minion = player.minion[field];\r\n    return minion && minion.buffs.find((buff) => buff.id === EffectId.OVERCHARGE) ? amount + 1 : amount;\r\n  }, 0);\r\n\r\n  if (minion.damage >= sum) {\r\n    minion.damage -= sum;\r\n  } else {\r\n    minion.damage = 0;\r\n  }\r\n\r\n  opponent.graveyard.push(trap);\r\n  opponent.trap = undefined;\r\n\r\n  return [true, \"Last stand triggered\"];\r\n};\r\n\r\nexport {constriction};\r\n","import {acidicDeath} from \"./acidicDeath\";\r\nimport {banish} from \"./banish\";\r\nimport {shadowSurge} from \"./shadowSurge\";\r\nimport {diminish} from \"./diminish\";\r\nimport {frostbite} from \"./frostbite\";\r\nimport {glory} from \"./glory\";\r\nimport {heartOfSteel} from \"./heartOfSteel\";\r\nimport {lastStand} from \"./lastStand\";\r\nimport {mirrorsEdge} from \"./mirrorsEdge\";\r\nimport {risingFury} from \"./risingFury\";\r\nimport {blaze} from \"./blaze\";\r\nimport {necromancy} from \"./necromancy\";\r\nimport {unity} from \"./unity\";\r\nimport {quickShot} from \"./quickShot\";\r\nimport {rebirth} from \"./rebirth\";\r\nimport {reload} from \"./reload\";\r\nimport {revenge} from \"./revenge\";\r\nimport {ricochet} from \"./ricochet\";\r\nimport {shell} from \"./shell\";\r\nimport {shieldwall} from \"./shieldwall\";\r\nimport {silence} from \"./silence\";\r\nimport {smite} from \"./smite\";\r\nimport {spellweave} from \"./spellweave\";\r\nimport {toxicSpray} from \"./toxicSpray\";\r\nimport {valor} from \"./valor\";\r\nimport {fortitude} from \"./fortitude\";\r\nimport { regeneration } from \"./regeneration\";\r\nimport { leech } from \"./leech\";\r\nimport { electroShock } from \"./electroShock\";\r\nimport { cleanse } from \"./cleanse\";\r\nimport { tidalWave } from \"./tidalWave\";\r\nimport { retribution } from \"./retribution\";\r\nimport { corrosiveTouch } from \"./corrosiveTouch\";\r\nimport { toxicGas } from \"./toxicGas\";\r\nimport { acidRain } from \"./acidRain\";\r\nimport { smokeBomb } from \"./smokeBomb\";\r\nimport { contaminatedAir } from \"./contaminatedAir\";\r\nimport { noxiousFumes } from \"./noxiousFumes\";\r\nimport { poisonedGround } from \"./poisonedGround\";\r\nimport { selfDestruct } from \"./selfDestruct\";\r\nimport { rampage } from \"./rampage\";\r\nimport { backstab } from \"./backstab\";\r\nimport { overpower } from \"./overpower\";\r\nimport { ignite } from \"./ignite\";\r\nimport { corruption } from \"./corruption\";\r\nimport { hysteria } from \"./hysteria\";\r\nimport { explosive } from \"./explosive\";\r\nimport { reflection } from \"./reflection\";\r\nimport { constriction } from \"./constriction\";\r\n\r\nconst triggerEffect = {\r\n  acidicDeath,\r\n  acidRain,\r\n  banish,\r\n  backstab,\r\n  cleanse,\r\n  corrosiveTouch,\r\n  contaminatedAir,\r\n  shadowSurge,\r\n  diminish,\r\n  electroShock,\r\n  fortitude,\r\n  frostbite,\r\n  glory,\r\n  heartOfSteel,\r\n  lastStand,\r\n  leech,\r\n  mirrorsEdge,\r\n  risingFury,\r\n  blaze,\r\n  necromancy,\r\n  unity,\r\n  silence,\r\n  quickShot,\r\n  shieldwall,\r\n  smite,\r\n  spellweave,\r\n  rebirth,\r\n  regeneration,\r\n  retribution,\r\n  reload,\r\n  revenge,\r\n  ricochet,\r\n  shell,\r\n  toxicGas,\r\n  toxicSpray,\r\n  tidalWave,\r\n  valor,\r\n  smokeBomb,\r\n  noxiousFumes,\r\n  poisonedGround,\r\n  selfDestruct,\r\n  rampage,\r\n  overpower,\r\n  ignite,\r\n  corruption,\r\n  hysteria,\r\n  explosive,\r\n  reflection,\r\n  constriction,\r\n};\r\n\r\nexport {triggerEffect};\r\n","import {animateMagicTrigger} from \"./animateMagicTrigger\";\r\nimport {animateTrapTrigger} from \"./animateTrapTrigger\";\r\nimport {attackMinionSave} from \"./attackMinionSave\";\r\nimport {buildDeck} from \"./buildDeck\";\r\nimport {deductHealth} from \"./deductHealth\";\r\nimport {drawCard} from \"./drawCard\";\r\nimport {endGame} from \"./endGame\";\r\nimport {generateGame} from \"./generateGame\";\r\nimport {generateGameView} from \"./generateGameFe\";\r\nimport {getGame} from \"./getGame\";\r\nimport {getRandomMinion} from \"./getRandomMinion\";\r\nimport {isGameOver} from \"./isGameOver\";\r\nimport {moveToGraveyard} from \"./moveToGraveyard\";\r\nimport {gamePopup} from \"./gamePopup\";\r\nimport {saveGame} from \"./saveGame\";\r\nimport {startGame} from \"./startGame\";\r\nimport {triggerEffect} from \"./triggerEffect\";\r\nimport { insertBuff } from \"./insertBuff\";\r\nimport { insertDebuff } from \"./insertDebuff\";\r\nimport { getAdjacentMinions } from \"./getAdjacentMinions\";\r\n\r\nconst gameEngine = {\r\n  animateMagicTrigger,\r\n  animateTrapTrigger,\r\n  attackMinionSave,\r\n  buildDeck,\r\n  deductHealth,\r\n  drawCard,\r\n  endGame,\r\n  generateGame,\r\n  generateGameView,\r\n  getAdjacentMinions,\r\n  getGame,\r\n  getRandomMinion,\r\n  isGameOver,\r\n  moveToGraveyard,\r\n  gamePopup,\r\n  saveGame,\r\n  startGame,\r\n  insertBuff,\r\n  insertDebuff,\r\n  triggerEffect\r\n};\r\n\r\nexport default gameEngine;\r\n","import {mongo, server} from \"apis\";\nimport gameEngine from \"helpers/game\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst acceptGame: SocketRequest = (socket, error): void => {\n  const socketId = socket.id;\n  const {gamePopups, players} = mongo;\n  const {io} = server;\n\n  socket.on(\"acceptGame\", async () => {\n    const $player = await players.findOne({socketId});\n\n    if (!$player) {\n      return error(\"Player not found, try relogging.\");\n    }\n\n    const id = $player.gamePopupId;\n    const $gamePopup = await gamePopups.findOne({id});\n\n    if (!$gamePopup) {\n      return error(\"Game popup not found.\");\n    }\n\n    const {type, playerA, playerB} = $gamePopup;\n\n    if (playerA.hasAccepted || playerB.hasAccepted) {\n      const $gamePopupDelete = await gamePopups.deleteOne({id});\n\n      if (!$gamePopupDelete.deletedCount) {\n        return error(\"Error deleting game popup.\");\n      }\n\n      await gameEngine.startGame(id, type, playerA.name, playerB.name);\n    } else {\n      if (playerA.name === $player.name) {\n        playerA.hasAccepted = true;\n      } else if (playerB.name === $player.name) {\n        playerB.hasAccepted = true;\n      }\n\n      const [$playerA, $playerB, $gamePopupReplace] = await Promise.all([\n        players.findOne({\n          name: playerA.name\n        }),\n        players.findOne({\n          name: playerB.name\n        }),\n        gamePopups.replaceOne({id}, $gamePopup)\n      ]);\n\n      if (!$playerA || !$playerB) {\n        return error(\"Player A in popup not found.\");\n      }\n      if (!$playerB) {\n        return error(\"Player B in popup not found.\");\n      }\n      if (!$gamePopupReplace.modifiedCount) {\n        return error(\"Error replacing game popup.\");\n      }\n\n      io.to([$playerA.socketId, $playerB.socketId]).emit(\"acceptGame\");\n    }\n  });\n};\n\nexport {acceptGame};\n","import {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst closeLobby: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {players, lobbies} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"closeLobby\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const {name, lobbyId} = $player;\r\n\r\n    if (!lobbyId) {\r\n      return error(\"You are not in a lobby.\");\r\n    }\r\n\r\n    const id = lobbyId;\r\n    const $lobby = await lobbies.findOne({id});\r\n\r\n    if (!$lobby) {\r\n      return error(\"Lobby not found.\");\r\n    }\r\n\r\n    const {host, challengee} = $lobby;\r\n\r\n    if (host.name !== name) {\r\n      return error(\"You are not the lobby host.\");\r\n    }\r\n\r\n    const [$lobbyDelete, $playerUpdate] = await Promise.all([\r\n      lobbies.deleteOne({id}),\r\n      players.updateOne({socketId}, {\r\n        $set: {\r\n          lobbyId: 0,\r\n          status: PlayerStatus.ONLINE\r\n        }\r\n      })\r\n    ]);\r\n\r\n    if (!$lobbyDelete.deletedCount) {\r\n      return error(\"Error deleting lobby.\");\r\n    }\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Error updating player host.\");\r\n    }\r\n\r\n    socket.emit(\"closeLobby\");\r\n\r\n    if (challengee.name) {\r\n      const $challengee = await players.findOneAndUpdate({\r\n        name: challengee.name\r\n      }, {\r\n        $set: {\r\n          lobbyId: 0,\r\n          status: PlayerStatus.ONLINE\r\n        }\r\n      }, {\r\n        returnDocument: \"after\"\r\n      });\r\n\r\n      if (!$challengee.value) {\r\n        return error(\"Error updating player challengee.\");\r\n      }\r\n\r\n      io.to($challengee.value.socketId).emit(\"closeLobby\");\r\n    }\r\n  });\r\n};\r\n\r\nexport {closeLobby};\r\n","import {randomInt} from \"crypto\";\r\nimport {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo} from \"apis\";\r\nimport {isDeckValid} from \"helpers/player\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\nimport type {LobbyView} from \"@som/shared/types/frontend\";\r\n\r\nconst createLobby: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players, lobbies} = mongo;\r\n\r\n  socket.on(\"createLobby\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n    if ($player.lobbyId) {\r\n      return error(\"Already in a lobby.\");\r\n    }\r\n    if ($player.gameId) {\r\n      return error(\"Can't make a lobby while in game.\");\r\n    }\r\n    if ($player.queueId) {\r\n      return error(\"Can't make a lobby while in queue.\");\r\n    }\r\n    if (!isDeckValid($player.decks[$player.deckId])) {\r\n      return error(\"Invalid deck.\");\r\n    }\r\n\r\n    const {name} = $player;\r\n    const $account = await accounts.findOne({name});\r\n\r\n    if (!$account) {\r\n      return error(\"Account not found, try relogging.\");\r\n    }\r\n\r\n    const {avatarId} = $account;\r\n    const id = randomInt(1, 1000000001);\r\n    const lobby: LobbyView = {\r\n      id,\r\n      host: {name, avatarId},\r\n      challengee: {\r\n        name: \"\",\r\n        avatarId: 0\r\n      }\r\n    }\r\n\r\n    const [$lobbyInsert, $playerUpdate] = await Promise.all([\r\n      lobbies.insertOne(lobby),\r\n      players.updateOne({socketId}, {\r\n        $set: {\r\n          lobbyId: id,\r\n          status: PlayerStatus.IN_LOBBY\r\n        }\r\n      })\r\n    ]);\r\n\r\n    if (!$lobbyInsert.insertedId) {\r\n      return error(\"Error inserting lobby.\");\r\n    }\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Error updating player.\");\r\n    }\r\n\r\n    socket.emit(\"createLobby\", {lobby});\r\n  });\r\n};\r\n\r\nexport {createLobby};\r\n","import {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst declineGame: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {gamePopups, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"declineGame\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const id = $player.gamePopupId;\r\n    const $gamePopup = await gamePopups.findOne({id});\r\n\r\n    if (!$gamePopup) {\r\n      return error(\"Game popup not found.\");\r\n    }\r\n\r\n    const {playerA, playerB} = $gamePopup;\r\n    const [$gamePopupDelete, $playerA, $playerB] = await Promise.all([\r\n      gamePopups.deleteOne({id}),\r\n      players.findOneAndUpdate({\r\n        name: playerA.name\r\n      }, {\r\n        $set: {\r\n          status: PlayerStatus.ONLINE,\r\n          gamePopupId: 0\r\n        }\r\n      }, {\r\n        returnDocument: \"after\"\r\n      }),\r\n      players.findOneAndUpdate({\r\n        name: playerB.name\r\n      }, {\r\n        $set: {\r\n          status: PlayerStatus.ONLINE,\r\n          gamePopupId: 0\r\n        }\r\n      }, {\r\n        returnDocument: \"after\"\r\n      })\r\n    ]);\r\n\r\n    if (!$gamePopupDelete.deletedCount) {\r\n      return error(\"Failed to delete game popup.\");\r\n    }\r\n    if (!$playerA.value) {\r\n      return error(\"Player A in popup not found / updated.\");\r\n    }\r\n    if (!$playerB.value) {\r\n      return error(\"Player B in popup not found / updated.\");\r\n    }\r\n\r\n    io.to([\r\n      $playerA.value.socketId,\r\n      $playerB.value.socketId\r\n    ]).emit(\"declineGame\");\r\n  });\r\n};\r\n\r\nexport {declineGame};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst defaultSkin: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {players} = mongo;\r\n\r\n  socket.on(\"defaultSkin\", async (params) => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const {cardId} = params;\r\n    const $playerUpdate = await players.updateOne({socketId}, {\r\n      $pull: {\r\n        skins: {cardId}\r\n      }\r\n    });\r\n\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Failed to set default skin\");\r\n    }\r\n\r\n    socket.emit(\"defaultSkin\", {cardId});\r\n  });\r\n};\r\n\r\nexport {defaultSkin};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst finishTutorial: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {players} = mongo;\r\n\r\n  socket.on(\"finishTutorial\", async (params) => {\r\n    const {tutorial} = params;\r\n\r\n    if (\r\n      tutorial !== \"deckBuilder\" &&\r\n      tutorial !== \"wallet\" &&\r\n      tutorial !== \"play\"\r\n    ) {\r\n      return error(\"Invalid tutorial.\");\r\n    }\r\n\r\n    const $playerUpdate = await players.updateOne({socketId}, {\r\n      $set: {\r\n        [`tutorial.${tutorial}`]: true\r\n      }\r\n    });\r\n\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Failed to update player.\");\r\n    }\r\n\r\n    socket.emit(\"finishTutorial\", {tutorial});\r\n  });\r\n};\r\n\r\nexport {finishTutorial};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\n/**\r\n  * Call the below functionality once per hour / day, sort & store in mongodb.\r\n  * On signin event query the mongodb for sorted leaderboards and emit.\r\n  * Frontend should be able to re-query on leaderboards change (emit to all?).\r\n  * This event should then be removed.\r\n**/\r\n\r\nconst getLeaderboards: SocketRequest = (socket, error): void => {\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"getLeaderboards\", async () => {\r\n    const byLevel = (await players\r\n      .find()\r\n      .limit(100)\r\n      .sort({\r\n        level: -1\r\n      })\r\n      .toArray()\r\n    ).map(({name, level}) => ({name, level, avatarId: 1}));\r\n\r\n    for (let i = 0; i < byLevel.length; i += 1) {\r\n      const $account = await accounts.findOne({name: byLevel[i].name});\r\n      if (!$account) { return; }\r\n      const {avatarId} = $account;\r\n      byLevel[i].avatarId = avatarId;\r\n    }\r\n\r\n    const byElo = (await players\r\n      .find()\r\n      .limit(100)\r\n      .sort({\r\n        elo: -1\r\n      })\r\n      .toArray()\r\n    ).map(({name, elo}) => ({name, elo, avatarId: 1}));\r\n\r\n    for (let i = 0; i < byElo.length; i += 1) {\r\n      const $account = await accounts.findOne({name: byElo[i].name});\r\n      if (!$account) { return; }\r\n      const {avatarId} = $account;\r\n      byElo[i].avatarId = avatarId;\r\n    }\r\n\r\n    socket.emit(\"getLeaderboards\", {byLevel, byElo});\r\n  });\r\n};\r\n\r\nexport {getLeaderboards};\r\n","import type {WithId} from \"mongodb\";\r\nimport type {LobbyView} from \"@som/shared/types/frontend\";\r\nimport type {Lobby} from \"@som/shared/types/backend\";\r\n\r\nconst generateLobbyView = ($lobby: WithId<Lobby>): LobbyView => {\r\n  const {id, host, challengee} = $lobby;\r\n  return {id, host, challengee};\r\n};\r\n\r\nexport {generateLobbyView};\r\n","import {GameType, QueueId} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\nimport gameEngine from \"helpers/game\";\n\nconst joinCasualQueue = async (name: string, level: number): Promise<void> => {\n  const {casualQueuePlayers, players} = mongo;\n  const opponents = await casualQueuePlayers.find().toArray();\n\n  for (const opponent of opponents) { // maybe create an interval and loop every 20 seconds for matchmaking\n    if (opponent.level < level - 100 || opponent.level < level + 100) {\n      const $casualQueuePlayerDelete = await casualQueuePlayers.deleteOne({\n        name: opponent.name\n      });\n      const $playerUpdate = await players.updateOne({\n        name: opponent.name\n      }, {\n        $set: {\n          queueId: QueueId.NONE\n        }\n      });\n      const $playerUpdate2 = await players.updateOne({\n        name\n      }, {\n        $set: {\n          queueId: QueueId.NONE\n        }\n      });\n\n      if (!$casualQueuePlayerDelete.deletedCount || !$playerUpdate.modifiedCount) {\n        console.error(\"Failed removing player from queue after match found.\");\n        return;\n      }\n\n      await gameEngine.gamePopup(GameType.CASUAL, opponent.name, name);\n\n      return;\n    }\n  }\n\n  const $casualQueuePlayerInsert = await casualQueuePlayers.insertOne({name, level});\n\n  if (!$casualQueuePlayerInsert.insertedId) {\n    console.error(\"Failed to insert player in the queue.\");\n    return;\n  }\n\n  // player queue id is set in joinQueue request.\n};\n\nexport {joinCasualQueue};\n","import {GameType, QueueId} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\nimport gameEngine from \"helpers/game\";\n\nconst joinRankedQueue = async (name: string, elo: number): Promise<void> => {\n  const {rankedQueuePlayers, players} = mongo;\n  const opponents = await rankedQueuePlayers.find().toArray();\n\n  for (const opponent of opponents) {\n    if (opponent.elo < elo - 11250 || opponent.elo < elo + 11250) {\n      const $casualQueuePlayerDelete = await rankedQueuePlayers.deleteOne({\n        name: opponent.name\n      });\n      const $playerUpdate = await players.updateOne({\n        name: opponent.name\n      }, {\n        $set: {\n          queueId: QueueId.NONE\n        }\n      });\n      const $playerUpdate2 = await players.updateOne({\n        name\n      }, {\n        $set: {\n          queueId: QueueId.NONE\n        }\n      });\n\n      if (!$casualQueuePlayerDelete.deletedCount || !$playerUpdate.modifiedCount) {\n        console.error(\"Failed removing player from queue after match found.\");\n        return;\n      }\n\n      await gameEngine.gamePopup(GameType.RANKED, opponent.name, name);\n\n      return;\n    }\n  }\n\n  const inserted = await rankedQueuePlayers.insertOne({name, elo});\n\n  if (!inserted.insertedId) {\n    console.error(\"Failed to insert player in the queue.\");\n    return;\n  }\n};\n\nexport {joinRankedQueue};\n","import {PlayerStatus} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\n\nconst leaveCasualQueue = async (name: string): Promise<void> => {\n  const {casualQueuePlayers, players} = mongo;\n  const [deleteCasualQueuePlayer, updatePlayer] = await Promise.all([\n    casualQueuePlayers.deleteOne({name}),\n    players.updateOne({name}, {\n      $set: {\n        status: PlayerStatus.ONLINE,\n        queueId: 0\n      }\n    })\n  ]);\n\n  if (!deleteCasualQueuePlayer.deletedCount || !updatePlayer.modifiedCount) {\n    console.error(\"Error removing player from queue.\");\n    return;\n  }\n};\n\nexport {leaveCasualQueue};\n","import {PlayerStatus} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\n\nconst leaveRankedQueue = async (name: string): Promise<void> => {\n  const [deleteRankedQueuePlayer, updatePlayer] = await Promise.all([\n    mongo.rankedQueuePlayers.deleteOne({name}),\n    mongo.players.updateOne({name}, {\n      $set: {\n        status: PlayerStatus.ONLINE,\n        queueId: 0\n      }\n    })\n  ]);\n\n  if (!deleteRankedQueuePlayer.deletedCount || !updatePlayer.modifiedCount) {\n    console.error(\"Error removing player from queue.\");\n    return;\n  }\n};\n\nexport {leaveRankedQueue};\n","import {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\nimport {generateLobbyView} from \"helpers/client\";\r\nimport {isDeckValid} from \"helpers/player\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst joinLobby: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, lobbies, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"joinLobby\", async (params) => {\r\n    const {id} = params;\r\n    const [$player, $lobby] = await Promise.all([\r\n      players.findOne({socketId}),\r\n      lobbies.findOne({id})\r\n    ]);\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found.\");\r\n    }\r\n    if (!$lobby) {\r\n      return error(\"Lobby not found.\");\r\n    }\r\n    if ($player.lobbyId) {\r\n      return error(\"You are already in a lobby.\");\r\n    }\r\n    if ($player.gameId) {\r\n      return error(\"You can't join a lobby while in game.\");\r\n    }\r\n    if ($lobby.challengee.name) {\r\n      return error(\"Lobby is full.\");\r\n    }\r\n    if (!isDeckValid($player.decks[$player.deckId])) {\r\n      return error(\"Invalid deck.\");\r\n    }\r\n\r\n    const {name} = $player;\r\n    const $account = await accounts.findOne({name});\r\n\r\n    if (!$account) {\r\n      return error(\"Eternitas account not found for player.\");\r\n    }\r\n\r\n    const {avatarId} = $account;\r\n\r\n    const [$lobbyUpdate, $playerUpdate, $playerHost] = await Promise.all([\r\n      lobbies.findOneAndUpdate({id}, {\r\n        $set: {\r\n          challengee: {name, avatarId}\r\n        }\r\n      }, {\r\n        returnDocument: \"after\"\r\n      }),\r\n      players.updateOne({socketId}, {\r\n        $set: {\r\n          lobbyId: id,\r\n          status: PlayerStatus.IN_LOBBY\r\n        }\r\n      }),\r\n      players.findOne({\r\n        name: $lobby.host.name\r\n      })\r\n    ]);\r\n\r\n    if (!$lobbyUpdate.value) {\r\n      return error(\"Error updating lobby.\");\r\n    }\r\n    if (!$playerUpdate.modifiedCount) {\r\n     return error(\"Error updating player.\");\r\n    }\r\n    if (!$playerHost) {\r\n      return error(\"Lobby host not found.\");\r\n    }\r\n\r\n    const lobby = generateLobbyView($lobbyUpdate.value);\r\n    const {challengee} = lobby;\r\n\r\n    socket.emit(\"joinLobbySender\", {lobby});\r\n    io.to($playerHost.socketId).emit(\"joinLobbyReceiver\", {challengee});\r\n  });\r\n};\r\n\r\nexport {joinLobby};\r\n","import {PlayerStatus, QueueId} from \"@som/shared/enums\";\nimport {mongo} from \"apis\";\nimport {joinCasualQueue, joinRankedQueue} from \"helpers/client\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst joinQueue: SocketRequest = (socket, error): void => {\n  const {players} = mongo;\n  const socketId = socket.id;\n\n  socket.on(\"joinQueue\", async (params) => {\n    const {queueId} = params;\n\n    if (!(queueId in QueueId) || queueId === QueueId.NONE) {\n      return error(\"Invalid queue selected.\");\n    }\n\n    const $player = await players.findOne({socketId});\n\n    if (!$player) {\n      return error(\"Player not found.\");\n    }\n    if ($player.queueId) {\n      return error(\"You are already in a queue.\");\n    }\n    if ($player.lobbyId) {\n      return error(\"Can't join queue while in lobby.\");\n    }\n    if ($player.gameId) {\n      return error(\"Can't join queue while in game.\");\n    }\n    if ($player.gamePopupId) {\n      return error(\"Can't join queue while in game popup.\");\n    }\n\n    const {name, level, elo} = $player;\n\n    if (queueId === QueueId.CASUAL) {\n      joinCasualQueue(name, level);\n    } else if (queueId === QueueId.RANKED) {\n      joinRankedQueue(name, elo);\n    }\n\n    const $playerUpdate = await players.updateOne({socketId}, {\n      $set: {\n        status: PlayerStatus.IN_QUEUE,\n        queueId\n      }\n    })\n\n    if (!$playerUpdate.modifiedCount) {\n      return error(\"Error updating player.\");\n    }\n\n    socket.emit(\"joinQueue\", {queueId});\n  });\n};\n\nexport {joinQueue};\n","import {PlayerStatus} from \"@som/shared/enums\";\r\nimport {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst leaveLobby: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {lobbies, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"leaveLobby\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found.\");\r\n    }\r\n    if (!$player.lobbyId) {\r\n      return error(\"You are not in a lobby.\");\r\n    }\r\n\r\n    const id = $player.lobbyId;\r\n    const $lobby = await lobbies.findOne({id});\r\n\r\n    if (!$lobby) {\r\n      return error(\"Lobby not found.\");\r\n    }\r\n    if ($lobby.host.name === $player.name) {\r\n      return error(\"Lobby host can't leave lobby.\");\r\n    }\r\n\r\n    const [$lobbyUpdate, $playerUpdate, $playerHost] = await Promise.all([\r\n      lobbies.updateOne({id}, {\r\n        $set: {\r\n          challengee: {\r\n            name: \"\",\r\n            avatarId: 0\r\n          }\r\n        }\r\n      }),\r\n      players.updateOne({socketId}, {\r\n        $set: {\r\n          lobbyId: 0,\r\n          status: PlayerStatus.ONLINE\r\n        }\r\n      }),\r\n      players.findOne({\r\n        name: $lobby.host.name\r\n      })\r\n    ]);\r\n\r\n    if (!$lobbyUpdate.modifiedCount) {\r\n      return error(\"Error updating lobby.\");\r\n    }\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Error updating player.\");\r\n    }\r\n    if (!$playerHost) {\r\n      return error(\"Lobby host not found.\");\r\n    }\r\n\r\n    socket.emit(\"leaveLobbySender\");\r\n    io.to($playerHost.socketId).emit(\"leaveLobbyReceiver\");\r\n  });\r\n};\r\n\r\nexport {leaveLobby};\r\n","import {QueueId} from \"@som/shared/enums\";\r\nimport {mongo} from \"apis\";\r\nimport {leaveCasualQueue, leaveRankedQueue} from \"helpers/client\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst leaveQueue: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n\r\n  socket.on(\"leaveQueue\", async () => {\r\n    const $player = await mongo.players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found.\");\r\n    }\r\n    if (!$player.queueId) {\r\n      return error(\"You are not in a queue.\");\r\n    }\r\n\r\n    const {name} = $player;\r\n\r\n    if ($player.queueId === QueueId.CASUAL) {\r\n      leaveCasualQueue(name);\r\n    } else if ($player.queueId === QueueId.RANKED) {\r\n      leaveRankedQueue(name);\r\n    }\r\n\r\n    socket.emit(\"leaveQueue\");\r\n  });\r\n};\r\n\r\nexport {leaveQueue};\r\n","import {cards} from \"@som/shared/data\";\r\nimport {CardType} from \"@som/shared/enums\";\r\nimport {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst saveDeck: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {players} = mongo;\r\n\r\n  socket.on(\"saveDeck\", async (params) => {\r\n    const {deck} = params;\r\n\r\n    if (deck.name.length >= 12) {\r\n      return error(\"Maximum 12 characters length allowed for deck name.\");\r\n    }\r\n    if (deck.klass < 1 || deck.klass > 4) { // prevent decimals?\r\n      return error(\"Invalid class.\");\r\n    }\r\n\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    for (const deckCard of deck.cards) {\r\n      const card = cards.find((card) => card.id === deckCard.id);\r\n\r\n      if (!card) {\r\n        return error(\"One of the cards in your deck is invalid.\");\r\n      }\r\n      if (card.type === CardType.HERO) {\r\n        return error(\"Can't add Hero as a deck card.\");\r\n      }\r\n      if (deckCard.amount > 2 || deckCard.amount < 1) { // prevent decimals?\r\n        return error(\"Invalid amount of same cards added.\");\r\n      }\r\n    }\r\n\r\n    const totalCards = deck.cards.reduce((acc, {amount}) => acc += amount, 0);\r\n\r\n    if (totalCards !== 30) {\r\n      return error(\"Invalid number of cards, should be 30.\");\r\n    }\r\n\r\n    const $playerUpdate = await players.updateOne({\r\n      socketId,\r\n      \"decks.id\": $player.deckId\r\n    }, {\r\n      $set: {\r\n        \"decks.$\": deck\r\n      }\r\n    });\r\n\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Error saving deck (Most likely you made no changes to it).\");\r\n    }\r\n\r\n    socket.emit(\"notification\", \"Deck saved successfully.\");\r\n  });\r\n};\r\n\r\nexport {saveDeck};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst selectDeck: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {players} = mongo;\r\n\r\n  socket.on(\"selectDeck\", async (params) => {\r\n    const {deckId} = params;\r\n\r\n    if (deckId < 0 || deckId > 3) {\r\n      return error(\"Invalid deck range.\");\r\n    }\r\n\r\n    const $playerUpdate = await players.updateOne({socketId}, {\r\n      $set: {deckId}\r\n    });\r\n\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Failed to set deck id.\");\r\n    }\r\n\r\n    socket.emit(\"selectDeck\", {deckId});\r\n  });\r\n};\r\n\r\nexport {selectDeck};\r\n","import {items} from \"@som/shared/data\";\nimport {contracts, mongo} from \"apis\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst selectSkin: SocketRequest = (socket, error): void => {\n  const socketId = socket.id;\n  const {accounts, players} = mongo;\n\n  socket.on(\"selectSkin\", async (params) => {\n    const $player = await players.findOne({socketId});\n\n    if (!$player) {\n      return error(\"Player not found.\");\n    }\n\n    const {name} = $player;\n    const $account = await accounts.findOne({name});\n\n    if (!$account) {\n      return error(\"Account not found.\");\n    }\n\n    const {id} = params;\n    const item = items.find((item) => item.id === id);\n\n    if (!item || item.type !== 2) { // 2 === skin, make ItemType enum?\n      return error(\"Selected item isn't a skin.\");\n    }\n\n    const balance = await contracts.skins.balanceOf($account.publicKey, id);\n\n    if (balance.lte(0)) {\n      return error(\"You do not own the skin.\");\n    }\n\n    const $playerUpdate = await players.updateOne({\n      socketId,\n      \"skins.cardId\": item.cardId\n    }, {\n      $set: {\n        \"skins.$\": {cardId: item.cardId, skinId: id}\n      }\n    });\n\n    if (!$playerUpdate.modifiedCount) {\n      // most likely failed because skins.$ object not found, in that case add\n      // it instead.\n      const $playerUpdate2 = await players.updateOne({socketId}, {\n        $addToSet: {\n          skins: {cardId: item.cardId, skinId: id}\n        }\n      });\n\n      if (!$playerUpdate2) {\n        return error(\"Failed to set the skin.\");\n      }\n    }\n\n    socket.emit(\"selectSkin\", {\n      cardId: item.cardId,\n      skinId: id\n    });\n  });\n};\n\nexport {selectSkin};\n","import {GameType} from \"@som/shared/enums\";\r\nimport {mongo} from \"apis\";\r\nimport gameEngine from \"helpers/game\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst startCustomGame: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {lobbies, players} = mongo;\r\n\r\n  socket.on(\"startCustomGame\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, please relog.\");\r\n    }\r\n    if (!$player.lobbyId) {\r\n      return error(\"You are not in a lobby.\");\r\n    }\r\n\r\n    const id = $player.lobbyId;\r\n    const $lobby = await lobbies.findOne({id});\r\n\r\n    if (!$lobby) {\r\n      return error(\"Lobby not found.\");\r\n    }\r\n    if ($player.name !== $lobby.host.name) {\r\n      return error(\"You are not the host.\");\r\n    }\r\n\r\n    const $lobbyDelete = await lobbies.deleteOne({id});\r\n\r\n    if (!$lobbyDelete.deletedCount) {\r\n      return error(\"Failed to delete lobby.\");\r\n    }\r\n\r\n    const {host, challengee} = $lobby;\r\n\r\n    await gameEngine.startGame(\r\n      $lobby.id,\r\n      GameType.CUSTOM,\r\n      host.name,\r\n      challengee.name\r\n    );\r\n  });\r\n};\r\n\r\nexport {startCustomGame};\r\n","import {acceptGame} from \"./acceptGame\";\r\nimport {closeLobby} from \"./closeLobby\";\r\nimport {createLobby} from \"./createLobby\";\r\nimport {declineGame} from \"./declineGame\";\r\nimport {defaultSkin} from \"./defaultSkin\";\r\nimport {finishTutorial} from \"./finishTutorial\";\r\nimport {getLeaderboards} from \"./getLeaderboards\";\r\nimport {joinLobby} from \"./joinLobby\";\r\nimport {joinQueue} from \"./joinQueue\";\r\nimport {leaveLobby} from \"./leaveLobby\";\r\nimport {leaveQueue} from \"./leaveQueue\";\r\nimport {saveDeck} from \"./saveDeck\";\r\nimport {selectDeck} from \"./selectDeck\";\r\nimport {selectSkin} from \"./selectSkin\";\r\nimport {startCustomGame} from \"./startCustomGame\";\r\n\r\nconst client = [\r\n  acceptGame,\r\n  closeLobby,\r\n  createLobby,\r\n  declineGame,\r\n  defaultSkin,\r\n  finishTutorial,\r\n  getLeaderboards,\r\n  joinLobby,\r\n  joinQueue,\r\n  leaveLobby,\r\n  leaveQueue,\r\n  saveDeck,\r\n  selectDeck,\r\n  selectSkin,\r\n  startCustomGame\r\n];\r\n\r\nexport {client};\r\n","import {EffectId} from \"@som/shared/enums\";\nimport gameEngine from \"helpers/game\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst attackHero: SocketRequest = (socket, error): void => {\n  const socketId = socket.id;\n  const {triggerEffect} = gameEngine;\n\n  socket.on(\"attackHero\", async (params) => {\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\n\n    if (!getGameData) {\n      return error(getGameError);\n    }\n\n    const {attacker} = params;\n    const {$game, player, opponent} = getGameData;\n    const playerMinion = player.minion[attacker];\n    const opponentHero = opponent.hero;\n\n    if (!playerMinion) {\n      return;\n    }\n\n    const multiStrikeBuff = playerMinion.buffs.find((buff) => buff.id === EffectId.BLAZE);\n\n    if (!playerMinion.canAttack) {\n      if (multiStrikeBuff && !multiStrikeBuff.data.hasAtacked) {\n        multiStrikeBuff.data.hasAttacked = true;\n      } else {\n        return error(\"This card can't attack anymore this turn.\");\n      }\n    } else {\n      playerMinion.canAttack = false;\n    }\n\n    const {trap} = opponent;\n\n    if (trap && trap.effect === EffectId.MIRRORS_EDGE) {\n      triggerEffect.mirrorsEdge({\n        player,\n        opponent,\n        minion: playerMinion,\n        trap\n      });\n\n      if (await gameEngine.isGameOver($game)) { return; }\n    }\n\n    if (trap && trap.effect === EffectId.RETRIBUTION) {\n      gameEngine.triggerEffect.retribution({player, field: attacker});\n    }\n\n    if (trap && trap.effect === EffectId.FROSTBITE) {\n      gameEngine.triggerEffect.frostbite({minion: playerMinion, player: opponent, trap: trap});\n    }\n\n    if (trap && trap.effect === EffectId.RUSTY_NEEDLE) {\n      gameEngine.insertDebuff(playerMinion, EffectId.NEUROTOXIN);\n    }\n\n    if (trap && trap.effect === EffectId.NOXIOUS_FUMES) {\n      const field = attacker;\n      triggerEffect.noxiousFumes({opponent: player, minion: playerMinion, field});\n    }\n\n    if (trap && trap.effect === EffectId.EXPLOSIVE) {\n      const field = attacker;\n      triggerEffect.explosive({player, opponent, trap, field});\n    }\n\n    if (playerMinion.health && playerMinion.buffs.find((buff) => buff.id === EffectId.CORROSIVE_TOUCH)) {\n      gameEngine.triggerEffect.corrosiveTouch({opponent});\n    }\n\n    if (playerMinion.health && playerMinion.buffs.find((buff) => buff.id === EffectId.RAMPAGE)) {\n      triggerEffect.rampage({minion: playerMinion});\n    }\n\n    if (playerMinion.health && playerMinion.buffs.find((buff) => buff.id === EffectId.BACKSTAB)) {\n      triggerEffect.backstab({opponent, minion: playerMinion});\n    }\n\n    opponentHero.health -= playerMinion.damage;\n\n    if (await gameEngine.isGameOver($game)) {\n      return;\n    }\n\n    await gameEngine.saveGame($game);\n  });\n};\n\nexport {attackHero};\n","import {CardKlass, EffectId} from \"@som/shared/enums\";\r\nimport gameEngine from \"helpers/game\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\nimport { getRandomMinion } from \"helpers/game/getRandomMinion\";\r\nimport { deductHealth } from \"helpers/game/deductHealth\";\r\nimport { deductHealth2 } from \"helpers/game/deductHealth2\";\r\nimport { insertDebuff } from \"helpers/game/insertDebuff\";\r\n\r\nconst attackMinion: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {triggerEffect} = gameEngine;\r\n\r\n  socket.on(\"attackMinion\", async (params) => {\r\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\r\n\r\n    if (!getGameData) {\r\n      return error(getGameError);\r\n    }\r\n\r\n    const {attacked, attacker} = params;\r\n    const {$game, player, opponent} = getGameData;\r\n    const playerMinion = player.minion[attacker];\r\n    const opponentMinion = opponent.minion[attacked];\r\n    const animate = []; // push sequences and emit with saveGame, loop animate on frontend, play all animations, and overwrite game state.\r\n\r\n    if (!playerMinion) {\r\n      return error(\"Players minion not found.\");\r\n    }\r\n\r\n    if (!opponentMinion) {\r\n      return error(\"Opponents minion not found.\");\r\n    }\r\n\r\n    // check if any of the opposing minions has Taunt, and whether the player minion has Marksmanship\r\n    // return error if not\r\n\r\n    if (\r\n      opponentMinion.buffs.find((buff) => buff.id === EffectId.STEALTH) &&\r\n      !playerMinion.buffs.find((buff) => buff.id === EffectId.SHADOWSTRIKE)\r\n    ) {\r\n      return error(\"Can't attack minion with stealth.\");\r\n    }\r\n\r\n    const multiStrikeBuff = playerMinion.buffs.find((buff) => buff.id === EffectId.BLAZE);\r\n\r\n    if (!playerMinion.canAttack) {\r\n      if (multiStrikeBuff && !multiStrikeBuff.data.hasAtacked) {\r\n        multiStrikeBuff.data.hasAttacked = true;\r\n      } else {\r\n        return error(\"This card can't attack anymore this turn.\");\r\n      }\r\n    } else {\r\n      playerMinion.canAttack = false;\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.MIRRORS_EDGE) {\r\n      triggerEffect.mirrorsEdge({\r\n        player,\r\n        opponent,\r\n        minion: playerMinion,\r\n        trap: opponent.trap\r\n      });\r\n\r\n      animate.push({\r\n        type: 1,\r\n        field: \"hero\",\r\n        damage: playerMinion.damage\r\n      });\r\n\r\n      if (await gameEngine.isGameOver($game)) { return; }\r\n    }\r\n\r\n    let ricochetData: any = [];\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.RICOCHET) {\r\n      ricochetData = triggerEffect.ricochet({\r\n        player,\r\n        opponent,\r\n        minionCard: playerMinion,\r\n        trapCard: opponent.trap\r\n      });\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.FROSTBITE) {\r\n      gameEngine.triggerEffect.frostbite({minion: playerMinion, player: opponent, trap: opponent.trap});\r\n\r\n      animate.push({\r\n        type: 0,\r\n        field: attacker,\r\n        text: \"+Frostbite\"\r\n      });\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.RUSTY_NEEDLE) {\r\n      insertDebuff(playerMinion, EffectId.NEUROTOXIN);\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.NOXIOUS_FUMES) {\r\n      triggerEffect.noxiousFumes({opponent: player, minion: playerMinion, field: attacker});\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.EXPLOSIVE) {\r\n      triggerEffect.explosive({player, opponent, trap: opponent.trap, field: attacker});\r\n    }\r\n\r\n    if (opponent.trap && opponent.trap.effect === EffectId.CONSTRICTION) {\r\n      triggerEffect.constriction({player, opponent, trap: opponent.trap, minion: playerMinion});\r\n    }\r\n\r\n    // remove this?\r\n    const attackerDamage = playerMinion.damage;\r\n    const attackedDamage = opponentMinion.damage;\r\n\r\n    if (playerMinion.buffs.find((buff) => buff.id === EffectId.POISONOUS_TOUCH)) {\r\n      gameEngine.insertDebuff(opponentMinion, EffectId.NEUROTOXIN);\r\n    }\r\n    if (playerMinion.buffs.find((buff) => buff.id === EffectId.CORROSIVE_TOUCH)) {\r\n      gameEngine.triggerEffect.corrosiveTouch({opponent});\r\n      if (await gameEngine.isGameOver($game)) {\r\n        return;\r\n      }\r\n    }\r\n    if (playerMinion.buffs.find((buff) => buff.id === EffectId.OVERPOWER)) {\r\n      if (playerMinion.damage > opponentMinion.health) {\r\n        gameEngine.triggerEffect.overpower({opponent, damage: playerMinion.damage - opponentMinion.health});\r\n        if (await gameEngine.isGameOver($game)) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (opponentMinion.buffs.find((buff) => buff.id === EffectId.POISONOUS_TOUCH)) {\r\n      gameEngine.insertDebuff(playerMinion, EffectId.NEUROTOXIN);\r\n    }\r\n    if (opponentMinion.buffs.find((buff) => buff.id === EffectId.CORROSIVE_TOUCH)) {\r\n      gameEngine.triggerEffect.corrosiveTouch({opponent: player});\r\n      if (await gameEngine.isGameOver($game)) {\r\n        return;\r\n      }\r\n    }\r\n    if (opponentMinion.buffs.find((buff) => buff.id === EffectId.OVERPOWER)) {\r\n      if (opponentMinion.damage > playerMinion.health) {\r\n        gameEngine.triggerEffect.overpower({opponent, damage: opponentMinion.damage - playerMinion.health});\r\n        if (await gameEngine.isGameOver($game)) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    deductHealth(player, opponent, playerMinion, opponentMinion);\r\n\r\n    animate.push({\r\n      type: 1,\r\n      field: attacked,\r\n      damage: playerMinion.damage\r\n    });\r\n\r\n    if (ricochetData.length && ricochetData[0] !== true) {\r\n      deductHealth(player, opponent, opponentMinion, playerMinion);\r\n\r\n      animate.push({\r\n        type: 1,\r\n        field: attacker,\r\n        damage: opponentMinion.damage\r\n      });\r\n    }\r\n\r\n    if (playerMinion.health <= 0 || (playerMinion.health === 1 && opponentMinion.buffs.find((buff) => buff.id === EffectId.EXECUTE))) {\r\n      if (player.trap && player.trap.effect === EffectId.LAST_STAND) {\r\n        gameEngine.triggerEffect.lastStand({minion: playerMinion, opponent: player, trap: player.trap})\r\n      } else {\r\n        const hasAcidicDeathBuff = playerMinion.buffs.find((buff) => buff.id === EffectId.ACIDIC_DEATH);\r\n        const hasSelfDescturctDebuff = playerMinion.debuffs.find((debuff) => debuff.id === EffectId.SELF_DESTRUCT);\r\n        if (player.trap && player.trap.effect === EffectId.REFLECTION) {\r\n          gameEngine.triggerEffect.reflection({player, opponent, trap: player.trap});\r\n        }\r\n\r\n        gameEngine.moveToGraveyard(player, playerMinion, attacker);\r\n\r\n        if (hasSelfDescturctDebuff) {\r\n          gameEngine.triggerEffect.selfDestruct({player});\r\n          if (await gameEngine.isGameOver($game)) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (hasAcidicDeathBuff) {\r\n          triggerEffect.acidicDeath({player, opponent});\r\n        }\r\n\r\n        (Object.keys(player.minion) as Array<keyof typeof player.minion>).forEach((key) => {\r\n          const minion = player.minion[key];\r\n          if (!minion) { return; }\r\n          if (minion.buffs.find((buff) => buff.id === EffectId.RISING_FURY)) {\r\n            gameEngine.triggerEffect.risingFury({minionCard: minion});\r\n          }\r\n          if (minion.buffs.find((buff) => buff.id === EffectId.SACRIFICE)) {\r\n            if (playerMinion.klass === CardKlass.LIQUID) {\r\n              const minion = getRandomMinion(player);\r\n              if (!minion) {return; }\r\n              minion.health += 3;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      if (playerMinion.buffs.find((buff) => buff.id === EffectId.RAMPAGE)) {\r\n        triggerEffect.rampage({minion: playerMinion});\r\n      }\r\n    }\r\n\r\n    if (opponentMinion.health <= 0 || (opponentMinion.health === 1 && playerMinion.buffs.find((buff) => buff.id === EffectId.EXECUTE))) {\r\n      if (opponent.trap && opponent.trap.effect === EffectId.LAST_STAND) {\r\n        gameEngine.triggerEffect.lastStand({minion: opponentMinion, opponent, trap: opponent.trap})\r\n      } else {\r\n        const hasAcidicDeathBuff = playerMinion.buffs.find((buff) => buff.id === EffectId.ACIDIC_DEATH);\r\n        const hasSelfDescturctDebuff = playerMinion.debuffs.find((debuff) => debuff.id === EffectId.SELF_DESTRUCT);\r\n        if (opponent.trap && opponent.trap.effect === EffectId.REFLECTION) {\r\n          gameEngine.triggerEffect.reflection({player: opponent, opponent: player, trap: opponent.trap});\r\n        }\r\n        gameEngine.moveToGraveyard(opponent, opponentMinion, attacked);\r\n\r\n        if (hasSelfDescturctDebuff) {\r\n          gameEngine.triggerEffect.selfDestruct({player});\r\n          if (await gameEngine.isGameOver($game)) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (hasAcidicDeathBuff) {\r\n          triggerEffect.acidicDeath({player, opponent});\r\n        }\r\n      }\r\n\r\n      (Object.keys(opponent.minion) as Array<keyof typeof opponent.minion>).forEach((key) => {\r\n        const minion = opponent.minion[key];\r\n        if (!minion) { return; }\r\n        if (minion.buffs.find((buff) => buff.id === EffectId.RISING_FURY)) {\r\n          gameEngine.triggerEffect.risingFury({minionCard: minion});\r\n        }\r\n        if (minion.buffs.find((buff) => buff.id === EffectId.SACRIFICE)) {\r\n          if (opponentMinion.klass === CardKlass.LIQUID) {\r\n            const minion = getRandomMinion(opponent);\r\n            if (!minion) {return; }\r\n            minion.health += 3;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      if (opponentMinion.buffs.find((buff) => buff.id === EffectId.RAMPAGE)) {\r\n        triggerEffect.rampage({minion: opponentMinion});\r\n      }\r\n    }\r\n\r\n    // await gameEngine.floatingText($game, player.name, attacked, attacker, opponentMinion.damage, playerMinion.damage);\r\n    // $game.battleLogs.push(attacked, attacker, playerMinion.id, opponentMinion.id);\r\n\r\n    await gameEngine.attackMinionSave($game, player.name, attacker, attacked, attackerDamage, attackedDamage);\r\n  });\r\n};\r\n\r\nexport {attackMinion};\r\n","import {EffectId} from \"@som/shared/enums\";\r\nimport gameEngine from \"helpers/game\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst endTurn: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n\r\n  socket.on(\"endTurn\", async () => {\r\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\r\n\r\n    if (!getGameData) {\r\n      return error(getGameError);\r\n    }\r\n\r\n    const {$game, player, opponent} = getGameData;\r\n\r\n    await gameEngine.drawCard($game, player, opponent);\r\n\r\n    player.hero.mana = 10;\r\n\r\n    const playerMinionFields = Object.keys(player.minion) as Array<keyof typeof player.minion>;\r\n\r\n    playerMinionFields.forEach((field) => {\r\n      const minion = player.minion[field];\r\n\r\n      if (!minion) { return; }\r\n\r\n      minion.canAttack = true;\r\n      gameEngine.triggerEffect.blaze({minion});\r\n\r\n      if (minion.buffs.find((buff) => buff.id === EffectId.REGENERATION)) {\r\n        gameEngine.triggerEffect.regeneration({player});\r\n      }\r\n    });\r\n\r\n    $game.currentPlayer = opponent.name;\r\n    $game.currentTurn += 1;\r\n\r\n    await gameEngine.saveGame($game);\r\n  });\r\n};\r\n\r\nexport {endTurn};\r\n","import {CardType, EffectId, LogType} from \"@som/shared/enums\";\r\nimport gameEngine from \"helpers/game\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst playMagic: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {triggerEffect} = gameEngine;\r\n\r\n  socket.on(\"playMagic\", async (params) => {\r\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\r\n\r\n    if (!getGameData) {\r\n      return error(getGameError);\r\n    }\r\n\r\n    const {gid, field, target} = params;\r\n    const {$game, player, opponent} = getGameData;\r\n\r\n    if (field && opponent.minion[field]?.buffs.find((buff) => buff.id === EffectId.ELUSIVE)) {\r\n      return error(\"Selected minion has Elusive buff.\");\r\n    }\r\n\r\n    const card = player.hand.find((card) => card.gid === gid);\r\n\r\n    if (!card) {\r\n      return error(\"Card not found in hand.\");\r\n    }\r\n\r\n    if (card.type !== CardType.MAGIC) {\r\n      return error(\"Selected card is not Magic.\");\r\n    }\r\n\r\n    if (card.manaCost > player.hero.mana) {\r\n      return error(\"Not enough mana.\");\r\n    }\r\n\r\n    player.hero.mana -= card.manaCost;\r\n    player.hand.splice(player.hand.indexOf(card), 1);\r\n    player.graveyard.push(card);\r\n\r\n    let logText = \"\";\r\n\r\n    const {trap} = opponent;\r\n\r\n    if (trap && trap.effect === EffectId.SILENCE) {\r\n      triggerEffect.silence({opponent, trap});\r\n    } else {\r\n      if (card.effect === EffectId.REBIRTH) {\r\n        const [success, message] = triggerEffect.rebirth({player, target, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.DIMINISH) {\r\n        const [success, message] = triggerEffect.diminish({opponent, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.RELOAD) {\r\n        triggerEffect.reload({player});\r\n      }\r\n\r\n      if (card.effect === EffectId.VALOR) {\r\n        const [success, message] = triggerEffect.valor({opponent});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          if (await gameEngine.isGameOver($game)) { return; }\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.SHELL) {\r\n        const [success, message] = triggerEffect.shell({player});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.FORTITUDE) {\r\n        const [success, message] = triggerEffect.fortitude({player, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.ELECTRO_SHOCK) {\r\n        const [success, message] = triggerEffect.electroShock({player, opponent});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.CLEANSE) {\r\n        const [success, message] = triggerEffect.cleanse({player, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.TIDAL_WAVE) {\r\n        const [success, message] = triggerEffect.tidalWave({player});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.ACID_RAIN) {\r\n        const [success, message] = triggerEffect.acidRain({opponent});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.SMOKE_BOMB) {\r\n        const [success, message] = triggerEffect.smokeBomb({player});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.CONTAMINATED_AIR) {\r\n        const [success, message] = triggerEffect.contaminatedAir({player, opponent});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.IGNITE) {\r\n        const [success, message] = triggerEffect.ignite({player, opponent, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.CORRUPTION) {\r\n        const [success, message] = triggerEffect.corruption({player, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n\r\n      if (card.effect === EffectId.HYSTERIA) {\r\n        const [success, message] = triggerEffect.hysteria({player, field});\r\n        if (!success) {\r\n          return error(message);\r\n        } else {\r\n          logText = message;\r\n        }\r\n      }\r\n    }\r\n\r\n    await gameEngine.animateMagicTrigger($game, player.name, card);\r\n\r\n    $game.gameLogs.push({\r\n      type: LogType.MAGIC,\r\n      player: player.name,\r\n      magicId: card.id\r\n    });\r\n\r\n    await gameEngine.saveGame($game);\r\n  });\r\n};\r\n\r\nexport {playMagic};\r\n","import {CardType, EffectId, LogType} from \"@som/shared/enums\";\nimport gameEngine from \"helpers/game\";\nimport type {SocketRequest} from \"@som/shared/types/backend\";\n\nconst playMinion: SocketRequest = (socket, error): void => {\n  const socketId = socket.id;\n  const {triggerEffect} = gameEngine;\n\n  socket.on(\"playMinion\", async (params) => {\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\n\n    if (!getGameData) {\n      return error(getGameError);\n    }\n\n    const {$game, player, opponent} = getGameData;\n    const {field, gid} = params;\n\n    if (player.minion[field]) {\n      return error(\"Field already inhibits a Minion.\");\n    }\n\n    const card = player.hand.find((card) => card.gid === gid);\n\n    if (!card) {\n      return error(\"Card not found in hand.\");\n    }\n\n    if (card.type !== CardType.MINION) {\n      return error(\"Selected card is not Minion.\");\n    }\n\n    if (card.manaCost > player.hero.mana) {\n      return error(\"Not enough mana.\");\n    }\n\n    player.hero.mana -= card.manaCost;\n    player.minion[field] = card;\n\n    const minion = player.minion[field];\n\n    if (!minion) {\n      return error(\"Error summoning card.\");\n    }\n\n    player.hand.splice(player.hand.indexOf(card), 1);\n\n    const {trap} = opponent;\n    const isElusive = minion.effect === EffectId.ELUSIVE;\n\n    // Step 1: Insert buffs / debuffs\n    // Step 2: Check for on summon trap cards\n    // Step 3: Trigger on summon effects\n\n    switch (minion.effect) {\n      case EffectId.BLAZE:\n        const hasAttackedTwice = true;\n        gameEngine.insertBuff(minion, EffectId.BLAZE, {hasAttackedTwice});\n        break;\n    }\n\n    if (trap && !isElusive) {\n      switch (trap.effect) {\n        case EffectId.SMITE:\n          triggerEffect.smite({player, opponent, minion, trap, field});\n          break;\n        case EffectId.BANISH:\n          triggerEffect.banish({player, opponent, minion, trap, field});\n          break;\n        case EffectId.POISONED_GROUND:\n          triggerEffect.poisonedGround({player: opponent, minion, trap});\n          break;\n      }\n    } else {\n      switch (minion.effect) {\n        // ---------- [ N E U T R A L ] ----------\n        case EffectId.SHADOW_SURGE:\n          triggerEffect.shadowSurge({minion});\n          break;\n        case EffectId.QUICK_SHOT:\n          triggerEffect.quickShot({opponent});\n          break;\n        case EffectId.NECROMANCY:\n          gameEngine.insertDebuff(minion, EffectId.NECROMANCY, {\n            health: -2,\n            damage: -2\n          });\n\n          const isPositive = false;\n\n          triggerEffect.necromancy({minion, isPositive});\n\n          break;\n        case EffectId.ELUSIVE:\n          gameEngine.insertBuff(minion, EffectId.ELUSIVE);\n          break;\n        case EffectId.REVENGE:\n          gameEngine.insertBuff(minion, EffectId.REVENGE);\n          break;\n        // ---------- [ S O L I D ] ----------\n        case EffectId.GLORY:\n          triggerEffect.glory({opponent, minion});\n          break;\n        case EffectId.UNITY:\n          gameEngine.insertBuff(minion, EffectId.UNITY);\n          break;\n        case EffectId.SPELLWEAVE:\n          triggerEffect.spellweave({player, minion});\n          break;\n        case EffectId.SHIELDWALL:\n          triggerEffect.shieldwall({player, field});\n          break;\n        case EffectId.UNBREAKABLE:\n          gameEngine.insertBuff(minion, EffectId.UNBREAKABLE);\n          break;\n        case EffectId.PROTECTOR:\n          gameEngine.insertBuff(minion, EffectId.TAUNT);\n          break;\n        // ---------- [ L I Q U I D ] ----------\n        case EffectId.RISING_FURY:\n          gameEngine.insertBuff(minion, EffectId.RISING_FURY);\n          break;\n        case EffectId.REGENERATION:\n          gameEngine.insertBuff(minion, EffectId.REGENERATION);\n          break;\n        case EffectId.SACRIFICE:\n          gameEngine.insertBuff(minion, EffectId.SACRIFICE);\n          break;\n        case EffectId.SHADOWSTRIKE:\n          gameEngine.insertBuff(minion, EffectId.SHADOWSTRIKE);\n          break;\n        case EffectId.LEECH:\n          gameEngine.insertBuff(minion, EffectId.LEECH);\n          break;\n        case EffectId.RESILIENT:\n          gameEngine.insertBuff(minion, EffectId.RESILIENT);\n          break;\n        // ---------- [ G A S ] ----------\n        case EffectId.ACIDIC_DEATH:\n          gameEngine.insertBuff(minion, EffectId.ACIDIC_DEATH);\n          break;\n        case EffectId.STEALTH:\n          gameEngine.insertBuff(minion, EffectId.STEALTH);\n          break;\n        case EffectId.POISONOUS_TOUCH:\n          gameEngine.insertBuff(minion, EffectId.POISONOUS_TOUCH);\n          break;\n        case EffectId.TOXIC_SPRAY:\n          triggerEffect.toxicSpray({opponent});\n          break;\n        case EffectId.CORROSIVE_TOUCH:\n          gameEngine.insertBuff(minion, EffectId.CORROSIVE_TOUCH);\n          break;\n        case EffectId.TOXIC_GAS:\n          triggerEffect.toxicGas({opponent});\n          break;\n        // ---------- [ P L A S M A ] ----------\n        case EffectId.SELF_DESTRUCT:\n          gameEngine.insertBuff(minion, EffectId.SELF_DESTRUCT);\n          break;\n        case EffectId.RAMPAGE:\n          gameEngine.insertBuff(minion, EffectId.RAMPAGE);\n          break;\n        case EffectId.BACKSTAB:\n          gameEngine.insertBuff(minion, EffectId.BACKSTAB);\n          break;\n        case EffectId.MARKSMANSHIP:\n          gameEngine.insertBuff(minion, EffectId.MARKSMANSHIP);\n          break;\n        case EffectId.OVERPOWER:\n          gameEngine.insertBuff(minion, EffectId.OVERPOWER);\n          break;\n        case EffectId.EXECUTE:\n          gameEngine.insertBuff(minion, EffectId.EXECUTE);\n          break;\n        default:\n          return error(\"Effect not found.\");\n      }\n    }\n\n    $game.gameLogs.push({\n      type: LogType.SUMMON,\n      field,\n      player: player.name,\n      minionId: minion.id\n    });\n\n    await gameEngine.saveGame($game);\n  });\n};\n\nexport {playMinion};\n","import {CardType} from \"@som/shared/enums\";\r\nimport gameEngine from \"helpers/game\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst playTrap: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n\r\n  socket.on(\"playTrap\", async (params) => {\r\n    const [getGameData, getGameError] = await gameEngine.getGame(socketId);\r\n\r\n    if (!getGameData) {\r\n      return error(getGameError);\r\n    }\r\n\r\n    const {$game, player} = getGameData;\r\n    const {gid} = params;\r\n\r\n    if (player.trap) {\r\n      return error(\"Trap Card is already set.\");\r\n    }\r\n\r\n    const card = player.hand.find((card) => card.gid === gid);\r\n\r\n    if (!card) {\r\n      return error(\"Card not found in hand.\");\r\n    }\r\n\r\n    if (card.type !== CardType.TRAP) {\r\n      return error(\"Selected card is not Trap.\");\r\n    }\r\n\r\n    if (card.manaCost > player.hero.mana) {\r\n      return error(\"Not enough mana.\");\r\n    }\r\n\r\n    player.hero.mana -= card.manaCost;\r\n    player.hand.splice(player.hand.indexOf(card), 1);\r\n    player.trap = card;\r\n\r\n    await gameEngine.saveGame($game);\r\n  });\r\n};\r\n\r\nexport {playTrap};\r\n","import {attackHero} from \"./attackHero\";\r\nimport {attackMinion} from \"./attackMinion\";\r\nimport {endTurn} from \"./endTurn\";\r\nimport {playMagic} from \"./playMagic\";\r\nimport {playMinion} from \"./playMinion\";\r\nimport {playTrap} from \"./playTrap\";\r\n\r\nconst game = [\r\n  attackHero,\r\n  attackMinion,\r\n  endTurn,\r\n  playMagic,\r\n  playMinion,\r\n  playTrap\r\n];\r\n\r\nexport {game};\r\n","import {mongo, server} from \"apis\";\r\nimport type {UpdateFilter} from \"mongodb\";\r\nimport type {Account, SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst acceptFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, chats, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"acceptFriend\", async (params) => {\r\n    const {name} = params;\r\n\r\n    const [$playerSender, $playerReceiver] = await Promise.all([\r\n      players.findOne({socketId}),\r\n      players.findOne({name})\r\n    ]);\r\n\r\n    if (!$playerSender) {\r\n      return error(\"Player sender not found.\");\r\n    }\r\n\r\n    if (!$playerReceiver) {\r\n      return error(\"Player receiver not found.\");\r\n    }\r\n\r\n    const [$accountSender, $accountReceiver, $chatInsert] = await Promise.all([\r\n      accounts.findOneAndUpdate({\r\n        name: $playerSender.name\r\n      }, {\r\n        $pull: {\r\n          \"social.requests\": name\r\n        },\r\n        $push: {\r\n          \"social.friends\": name\r\n        }\r\n      } as UpdateFilter<Account> | Partial<Account>, { // bug: https://github.com/Automattic/mongoose/issues/10075\r\n        returnDocument: \"after\"\r\n      }),\r\n\r\n      accounts.findOneAndUpdate({name}, {\r\n        $push: {\r\n          \"social.friends\": $playerSender.name\r\n        }\r\n      } as UpdateFilter<Account> | Partial<Account>, { // bug: https://github.com/Automattic/mongoose/issues/10075\r\n        returnDocument: \"after\"\r\n      }),\r\n\r\n      chats.insertOne({\r\n        players: [$playerSender.name, $playerReceiver.name],\r\n        messages: []\r\n      })\r\n    ]);\r\n\r\n    if (!$accountSender.value) {\r\n      return error(\"Account sender not found.\");\r\n    }\r\n\r\n    if (!$accountReceiver.value) {\r\n      return error(\"Account receiver not found.\");\r\n    }\r\n\r\n    if (!$chatInsert.insertedId) {\r\n      return error(\"Failed to insert chat.\");\r\n    }\r\n\r\n    socket.emit(\"acceptFriendSender\", {\r\n      name: $playerReceiver.name,\r\n      avatarId: $accountReceiver.value.avatarId,\r\n      status: $playerReceiver.status\r\n    });\r\n\r\n    io.to($playerReceiver.socketId).emit(\"acceptFriendReceiver\", {\r\n      name: $playerSender.name,\r\n      avatarId: $accountSender.value.avatarId,\r\n      status: $playerSender.status\r\n    });\r\n  });\r\n};\r\n\r\nexport {acceptFriend};\r\n","import {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst addFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"addFriend\", async (params) => {\r\n    const {name} = params;\r\n\r\n    const [$playerSender, $playerReceiver] = await Promise.all([\r\n      players.findOne({socketId}),\r\n      players.findOne({name})\r\n    ]);\r\n\r\n    if (!$playerSender) {\r\n      return error(\"Player sender not found.\");\r\n    }\r\n\r\n    if (!$playerReceiver) {\r\n      return error(\"Player receiver not found.\");\r\n    }\r\n\r\n    const [$accountSender, $accountReceiver] = await Promise.all([\r\n      accounts.findOne({name: $playerSender.name}),\r\n      accounts.findOne({name: $playerReceiver.name})\r\n    ]);\r\n\r\n    if (!$accountSender) {\r\n      return error(\"Account sender not found.\");\r\n    }\r\n\r\n    if (!$accountReceiver) {\r\n      return error(\"Account receiver not found.\");\r\n    }\r\n\r\n    if ($accountSender.name === name) {\r\n      return error(\"You can't add yourself as a friend.\");\r\n    }\r\n\r\n    if ($accountReceiver.social.blocked.includes($accountSender.name)) {\r\n      return error(\"This player has blocked you.\");\r\n    }\r\n\r\n    if ($accountSender.social.blocked.includes(name)) {\r\n      return error(\"You have blocked this player.\");\r\n    }\r\n\r\n    if ($accountReceiver.social.requests.includes($accountSender.name)) {\r\n      return error(\"You have already sent the request to this player.\");\r\n    }\r\n\r\n    if ($accountSender.social.requests.includes(name)) {\r\n      return error(\"This player has already sent you the request.\");\r\n    }\r\n\r\n    if ($accountSender.social.friends.includes(name)) {\r\n      return error(\"This player is already your friend.\");\r\n    }\r\n\r\n    const $playerUpdate = await accounts.updateOne({name}, {\r\n      $push: {\r\n        \"social.requests\": $accountSender.name\r\n      }\r\n    });\r\n\r\n    if (!$playerUpdate.modifiedCount) {\r\n      return error(\"Error updating player.\");\r\n    }\r\n\r\n    socket.emit(\"notification\", \"Friend request sent.\");\r\n\r\n    io.to($playerReceiver.socketId).emit(\"addFriend\", {\r\n      name: $accountSender.name\r\n    });\r\n  });\r\n};\r\n\r\nexport {addFriend};\r\n","import {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst blockFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, chats, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"blockFriend\", async (params) => {\r\n    const {name} = params;\r\n\r\n    const [$playerSender, $playerReceiver] = await Promise.all([\r\n      players.findOne({socketId}),\r\n      players.findOne({name})\r\n    ]);\r\n\r\n    if (!$playerSender) {\r\n      return error(\"Player sender not found.\");\r\n    }\r\n\r\n    if (!$playerReceiver) {\r\n      return error(\"Player receiver not found.\");\r\n    }\r\n\r\n    const [\r\n      $accountSenderUpdate,\r\n      $accountReceiverUpdate,\r\n      $chatDelete\r\n    ] = await Promise.all([\r\n      accounts.updateOne({\r\n        name: $playerSender.name\r\n      }, {\r\n        $pull: {\r\n          \"social.friends\": $playerReceiver.name\r\n        },\r\n        $push: {\r\n          \"social.blocked\": $playerReceiver.name\r\n        }\r\n      }),\r\n\r\n      accounts.updateOne({\r\n        name: $playerReceiver.name\r\n      }, {\r\n        $pull: {\r\n          \"social.friends\": $playerSender.name\r\n        }\r\n      }),\r\n\r\n      chats.deleteOne({\r\n        players: {\r\n          $all: [$playerReceiver.name, $playerSender.name]\r\n        }\r\n      })\r\n    ]);\r\n\r\n    if (!$accountSenderUpdate.modifiedCount) {\r\n      return error(\"Account sender not found.\");\r\n    }\r\n\r\n    if (!$accountReceiverUpdate.modifiedCount) {\r\n      return error(\"Account receiver not found.\");\r\n    }\r\n\r\n    if (!$chatDelete.deletedCount) {\r\n      return error(\"Failed to delete chat.\");\r\n    }\r\n\r\n    socket.emit(\"blockFriendSender\", {name});\r\n\r\n    io.to($playerReceiver.socketId).emit(\"blockFriendReceiver\", {\r\n      name: $playerSender.username\r\n    });\r\n  });\r\n};\r\n\r\nexport {blockFriend};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst declineFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"declineFriend\", async (params) => {\r\n    const {name} = params;\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const $accountUpdate = await accounts.updateOne({\r\n      name: $player.name\r\n    }, {\r\n      $pull: {\r\n        \"social.requests\": name\r\n      }\r\n    });\r\n\r\n    if (!$accountUpdate.modifiedCount) {\r\n      return error(\"Failed to update account.\");\r\n    }\r\n\r\n    socket.emit(\"declineFriend\", {name});\r\n  });\r\n};\r\n\r\nexport {declineFriend};\r\n","import {mongo, server} from \"apis\";\r\nimport type {UpdateFilter} from \"mongodb\";\r\nimport type {Account, SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst removeFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, chats, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"removeFriend\", async (params) => {\r\n    const {name} = params;\r\n\r\n    const [$playerSender, $playerReceiver] = await Promise.all([\r\n      players.findOne({socketId}),\r\n      players.findOne({name})\r\n    ]);\r\n\r\n    if (!$playerSender) {\r\n      return error(\"Player sender not found.\");\r\n    }\r\n\r\n    if (!$playerReceiver) {\r\n      return error(\"Player receiver not found.\");\r\n    }\r\n\r\n    const [\r\n      $accountSenderUpdate,\r\n      $accountReceiverUpdate,\r\n      $chatDelete\r\n    ] = await Promise.all([\r\n      accounts.findOneAndUpdate({\r\n        name: $playerSender.name\r\n      }, {\r\n        $pull: {\r\n          \"social.friends\": name\r\n        } as UpdateFilter<Account> | Partial<Account>\r\n      }, {\r\n        returnDocument: \"after\"\r\n      }),\r\n\r\n      accounts.findOneAndUpdate({name}, {\r\n        $pull: {\r\n          \"social.friends\": $playerSender.name\r\n        } as UpdateFilter<Account> | Partial<Account>\r\n      }, {\r\n        returnDocument: \"after\"\r\n      }),\r\n\r\n      chats.deleteOne({\r\n        players: {\r\n          $all: [name, $playerSender.name]\r\n        }\r\n      })\r\n    ]);\r\n\r\n    if (!$accountSenderUpdate.value) {\r\n      return error(\"Account sender not found.\");\r\n    }\r\n\r\n    if (!$accountReceiverUpdate.value) {\r\n      return error(\"Account receiver not found.\");\r\n    }\r\n\r\n    if (!$chatDelete.deletedCount) {\r\n      return error(\"Failed to delete chat.\");\r\n    }\r\n\r\n    socket.emit(\"removeFriendSender\", {name});\r\n\r\n    io.to($playerReceiver.socketId).emit(\"removeFriendReceiver\", {\r\n      name: $accountSenderUpdate.value.name\r\n    });\r\n  });\r\n};\r\n\r\nexport {removeFriend};\r\n","import {mongo, server} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst sendChatMsg: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players, chats} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"sendChatMsg\", async (params) => {\r\n    const {receiver, text} = params;\r\n\r\n    const [$playerSender, $playerReceiver] = await Promise.all([\r\n      players.findOne({socketId}),\r\n\r\n      players.findOne({\r\n        name: receiver\r\n      })\r\n    ]);\r\n\r\n    if (!$playerSender) {\r\n      return error(\"Player sender not found, try relogging.\");\r\n    }\r\n\r\n    if (!$playerReceiver) {\r\n      return error(\"Player receiver not found, try relogging.\");\r\n    }\r\n\r\n    const $account = await accounts.findOne({\r\n      name: $playerSender.name\r\n    });\r\n\r\n    if (!$account) {\r\n      return error(\"Account not found.\");\r\n    }\r\n\r\n    if (!$account.social.friends.includes(receiver)) {\r\n      return error(\"This user isn't your friend.\");\r\n    }\r\n\r\n    const date = new Date();\r\n\r\n    const $chatUpdate = await chats.updateOne({\r\n      players: {\r\n        $all: [$playerSender.name, receiver]\r\n      }\r\n    }, {\r\n      $push: {\r\n        messages: {\r\n          name: $playerSender.name,\r\n          text,\r\n          date\r\n        }\r\n      } // pop first if length > 100!\r\n    });\r\n\r\n    if (!$chatUpdate.modifiedCount) {\r\n      return error(\"Error updating chat.\");\r\n    }\r\n\r\n    socket.emit(\"sendChatMsgSender\", {\r\n      sender: $playerSender.name,\r\n      receiver,\r\n      text,\r\n      date\r\n    });\r\n\r\n    io.to($playerReceiver.socketId).emit(\"sendChatMsgReceiver\", {\r\n      sender: $playerSender.name,\r\n      text,\r\n      date\r\n    });\r\n  });\r\n};\r\n\r\nexport {sendChatMsg};\r\n","import {mongo, server} from \"apis\";\r\nimport {getSocketIds} from \"helpers/player\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst setAvatar: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"setAvatar\", async (params) => {\r\n    const {avatarId} = params;\r\n\r\n    if (avatarId < 0 || avatarId > 4) {\r\n      return error(\"Invalid avatar.\");\r\n    }\r\n\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const $accountUpdate = await accounts.findOneAndUpdate({\r\n      name: $player.name\r\n    }, {\r\n      $set: {avatarId}\r\n    }, {\r\n      returnDocument: \"after\"\r\n    });\r\n\r\n    if (!$accountUpdate.value) {\r\n      return error(\"Failed to update account.\");\r\n    }\r\n\r\n    const {name, social} = $accountUpdate.value;\r\n    const socketIds = await getSocketIds(social.friends);\r\n\r\n    socket.emit(\"setAvatarSender\", {avatarId});\r\n    server.io.to(socketIds).emit(\"setAvatarReceiver\", {name, avatarId});\r\n  });\r\n};\r\n\r\nexport {setAvatar};\r\n","import {mongo} from \"apis\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst unblockFriend: SocketRequest = (socket, error): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n\r\n  socket.on(\"unblockFriend\", async (params) => {\r\n    const {name} = params;\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) {\r\n      return error(\"Player not found, try relogging.\");\r\n    }\r\n\r\n    const $accountUpdate = await accounts.updateOne({name: $player.name}, {\r\n      $pull: {\r\n        \"social.blocked\": name\r\n      }\r\n    });\r\n\r\n    if (!$accountUpdate.modifiedCount) {\r\n      return error(\"Failed to update account.\");\r\n    }\r\n\r\n    socket.emit(\"unblockFriend\", {name});\r\n  });\r\n};\r\n\r\nexport {unblockFriend};\r\n","import {mongo, server} from \"apis\";\r\nimport {getSocketIds} from \"helpers/player\";\r\nimport type {SocketRequest} from \"@som/shared/types/backend\";\r\n\r\nconst updateStatus: SocketRequest = (socket): void => {\r\n  const socketId = socket.id;\r\n  const {accounts, players} = mongo;\r\n  const {io} = server;\r\n\r\n  socket.on(\"updateFriend\", async () => {\r\n    const $player = await players.findOne({socketId});\r\n\r\n    if (!$player) { return; }\r\n\r\n    const $account = await accounts.findOne({name: $player.name});\r\n\r\n    if (!$account) { return; }\r\n\r\n    const {name, status} = $player;\r\n    const socketIds = await getSocketIds($account.social.friends);\r\n\r\n    if (socketIds.length) {\r\n      io.to(socketIds).emit(\"updateFriend\", {name, status});\r\n    }\r\n  });\r\n};\r\n\r\nexport {updateStatus};\r\n","import {acceptFriend} from \"./acceptFriend\";\r\nimport {addFriend} from \"./addFriend\";\r\nimport {blockFriend} from \"./blockFriend\";\r\nimport {declineFriend} from \"./declineFriend\";\r\nimport {removeFriend} from \"./removeFriend\";\r\nimport {sendChatMsg} from \"./sendChatMsg\";\r\nimport {setAvatar} from \"./setAvatar\";\r\nimport {unblockFriend} from \"./unblockFriend\";\r\nimport {updateStatus} from \"./updateStatus\";\r\n\r\nconst sidenav = [\r\n  acceptFriend,\r\n  addFriend,\r\n  blockFriend,\r\n  declineFriend,\r\n  removeFriend,\r\n  sendChatMsg,\r\n  setAvatar,\r\n  unblockFriend,\r\n  updateStatus\r\n];\r\n\r\nexport {sidenav};\r\n","import {auth} from \"./auth\";\r\nimport {client} from \"./client\";\r\nimport {game} from \"./game\";\r\nimport {sidenav} from \"./sidenav\";\r\n\r\nconst requests = [...auth, ...client, ...game, ...sidenav];\r\n\r\nexport {requests};\r\n","import {mongo, server} from \"apis\";\r\nimport {contracts} from \"apis/ethers\";\r\nimport {BigNumber, utils} from \"ethers\";\r\nimport {requests} from \"requests\";\r\n\r\nprocess.on(\"unhandledRejection\", (reason, promise): void => {\r\n  console.log(`Unhandled rejection: ${reason}`);\r\n});\r\n\r\nprocess.on(\"uncaughtException\", (error, origin): void => {\r\n  console.log(`Uncaught Exception: ${error}`);\r\n});\r\n\r\n// maybe remove all rankedQueuePlayers, casualQueuePlayers, and gamePopups\r\n// when restarting the server?\r\n\r\n\r\n// put these ethereum events in separate files?\r\ncontracts.game.on(\"ListItem\", async (\r\n  seller: string,\r\n  listingId: BigNumber,\r\n  skinId: BigNumber,\r\n  amount: BigNumber,\r\n  price: BigNumber\r\n): Promise<void> => {\r\n  const $account = await mongo.accounts.findOne({\r\n    publicKey: seller.toLowerCase() // wtf is wrong with ethereum addresses?\r\n  });\r\n\r\n  if (!$account) {\r\n    console.log(\"Item seller account not found, listing anyway...\");\r\n  }\r\n\r\n  await mongo.marketItems.insertOne({\r\n    sellerName: $account ? $account.name : \"Not a player\",\r\n    sellerAddress: seller.toLowerCase(),\r\n    listingId: utils.formatUnits(listingId, 0),\r\n    skinId: utils.formatUnits(skinId, 0),\r\n    amount: utils.formatUnits(amount, 0),\r\n    price: utils.formatUnits(price, 18) // etheric crystals\r\n  });\r\n});\r\n\r\ncontracts.game.on(\"CancelItem\", async (listingId: BigNumber): Promise<void> => {\r\n  const $marketItemDelete = await mongo.marketItems.deleteOne({\r\n    listingId: utils.formatUnits(listingId, 0)\r\n  });\r\n\r\n  if (!$marketItemDelete) {\r\n    console.log(`Error deleting item ${listingId} from market`);\r\n  }\r\n});\r\n\r\ncontracts.game.on(\"BuyItem\", async (\r\n  listingId: BigNumber,\r\n  amount: BigNumber\r\n): Promise<void> => {\r\n  const $item = await mongo.marketItems.findOne({\r\n    listingId: utils.formatUnits(listingId, 0)\r\n  });\r\n\r\n  if (!$item) { return; }\r\n\r\n  const big = utils.parseUnits($item.amount, 0);\r\n\r\n  if (big.sub(amount).lte(0)) {\r\n    await mongo.marketItems.deleteOne({\r\n      listingId: utils.formatUnits(listingId, 0)\r\n    });\r\n  } else {\r\n    await mongo.marketItems.replaceOne({\r\n      listingId: utils.formatUnits(listingId, 0)\r\n    }, {\r\n      ...$item,\r\n      amount: utils.formatUnits(big.sub(amount), 0)\r\n    });\r\n  }\r\n});\r\n\r\nserver.io.on(\"connection\", (socket): void => {\r\n  const error = (msg: string): void => {\r\n    socket.emit(\"notification\", msg);\r\n    console.error(msg);\r\n  };\r\n\r\n  socket.on(\"getMarketItems\" as any, async () => {\r\n    const items = await mongo.marketItems.find().limit(100).toArray();\r\n    socket.emit(\"getMarketItems\" as any, {items});\r\n  });\r\n\r\n  requests.forEach((request): void => {\r\n    request(socket, error);\r\n  });\r\n});\r\n\r\nserver.http.listen(process.env.PORT || 4201);\r\n"],"names":["game"],"mappings":"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"}